name: ALT_LAS Pipeline Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  secrets-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  sbom-generation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-report
          path: sbom.spdx.json

  supply-chain-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: SLSA Provenance Generator
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
        with:
          base-image: ubuntu:latest
          private-repository: false
      
      - name: Verify Dependencies with Sigstore
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/download/v2.2.0/cosign-linux-amd64 -o cosign
          chmod +x cosign
          ./cosign verify-blob --key cosign.pub sbom.spdx.json

  container-security:
    runs-on: ubuntu-latest
    needs: [secrets-scanning, sbom-generation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: altlas/security-scan:${{ github.sha }}
      
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v6
        with:
          image: altlas/security-scan:${{ github.sha }}
          fail-build: true
          severity-cutoff: high
      
      - name: Run Falco runtime security
        run: |
          curl -s https://falco.org/repo/falcosecurity-packages.asc | sudo apt-key add -
          echo "deb https://download.falco.org/packages/deb stable main" | sudo tee -a /etc/apt/sources.list.d/falcosecurity.list
          sudo apt-get update -y
          sudo apt-get install -y falco
          sudo falco -c falco.yaml -r falco_rules.yaml -M 60

  secure-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    needs: [container-security, supply-chain-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/api-gateway
            ghcr.io/${{ github.repository }}/segmentation-service
            ghcr.io/${{ github.repository }}/runner-service
            ghcr.io/${{ github.repository }}/archive-service
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
      
      - name: Sign and push images with Cosign
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/download/v2.2.0/cosign-linux-amd64 -o cosign
          chmod +x cosign
          
          # Build, sign and push each image
          for service in api-gateway segmentation-service runner-service archive-service; do
            docker build -t ghcr.io/${{ github.repository }}/$service:${{ steps.meta.outputs.version }} ./$service
            docker push ghcr.io/${{ github.repository }}/$service:${{ steps.meta.outputs.version }}
            ./cosign sign --key cosign.key ghcr.io/${{ github.repository }}/$service:${{ steps.meta.outputs.version }}
          done
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      
      - name: Verify deployment with Kubernetes validations
        run: |
          curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          
          # Validate Kubernetes manifests
          ./kubectl apply --dry-run=client -f kubernetes/ --validate=true
          
          # Run kubeval for additional validation
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          ./kubeval --strict kubernetes/*.yaml
