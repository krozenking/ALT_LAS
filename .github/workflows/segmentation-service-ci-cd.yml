name: Segmentation Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'segmentation-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'segmentation-service/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f segmentation-service/requirements_updated.txt ]; then
          pip install -r segmentation-service/requirements_updated.txt
        else
          pip install -r segmentation-service/requirements.txt
        fi
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        cd segmentation-service
        python -m pytest test_*.py --cov=. --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./segmentation-service/coverage.xml
        flags: segmentation-service
        name: segmentation-service-coverage
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Lint with flake8
      run: |
        cd segmentation-service
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check formatting with black
      run: |
        cd segmentation-service
        black --check .
        
    - name: Check imports with isort
      run: |
        cd segmentation-service
        isort --check-only --profile black .
        
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./segmentation-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ghcr.io/${{ github.repository }}/segmentation-service:latest
          ghcr.io/${{ github.repository }}/segmentation-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Deploy to development environment
      run: |
        echo "Deploying segmentation-service to development environment"
        # In a real scenario, you would use kubectl, helm, or another deployment tool
        # kubectl set image deployment/segmentation-service segmentation-service=ghcr.io/${{ github.repository }}/segmentation-service:${{ github.sha }} -n development
        
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.alt-las.example.com/segmentation
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying segmentation-service to production environment"
        # In a real scenario, you would use kubectl, helm, or another deployment tool
        # kubectl set image deployment/segmentation-service segmentation-service=ghcr.io/${{ github.repository }}/segmentation-service:${{ github.sha }} -n production
