name: Segmentation Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'segmentation-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'segmentation-service/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f segmentation-service/requirements_updated.txt ]; then
          pip install -r segmentation-service/requirements_updated.txt
        else
          pip install -r segmentation-service/requirements.txt
        fi
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        
    - name: Run tests
      run: |
        cd segmentation-service
        python -m pytest test_*.py --cov=. --cov-report=xml --cov-report=term
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v5
      with:
        file: ./segmentation-service/coverage.xml
        flags: segmentation-service
        name: segmentation-service-coverage
        fail_ci_if_error: true
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Lint with flake8
      run: |
        cd segmentation-service
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check formatting with black
      run: |
        cd segmentation-service
        black --check .
        
    - name: Check imports with isort
      run: |
        cd segmentation-service
        isort --check-only --profile black .
        
    - name: Type check with mypy
      run: |
        cd segmentation-service
        mypy --ignore-missing-imports .
        
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security scan with bandit
      run: |
        cd segmentation-service
        bandit -r . -x ./tests,./test_*.py
        
    - name: Check dependencies with safety
      run: |
        cd segmentation-service
        if [ -f requirements_updated.txt ]; then
          safety check -r requirements_updated.txt
        else
          safety check -r requirements.txt
        fi
        
  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/segmentation-service
        tags: |
          type=semver,pattern={{version}}
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=long
          latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./segmentation-service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Generate deployment configuration
      run: |
        cd segmentation-service
        python ci_cd_config.py --action generate --environment development --output deployment
        
    - name: Deploy to development environment
      run: |
        echo "Deploying segmentation-service to development environment"
        # In a real scenario, you would use kubectl, helm, or another deployment tool
        # kubectl apply -f segmentation-service/deployment.kubernetes.yml -n development
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment to development environment"
        # In a real scenario, you would check if the deployment was successful
        # kubectl rollout status deployment/segmentation-service -n development
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-api.alt-las.example.com/segmentation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Generate deployment configuration
      run: |
        cd segmentation-service
        python ci_cd_config.py --action generate --environment staging --output deployment
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying segmentation-service to staging environment"
        # In a real scenario, you would use kubectl, helm, or another deployment tool
        # kubectl apply -f segmentation-service/deployment.kubernetes.yml -n staging
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment to staging environment"
        # In a real scenario, you would check if the deployment was successful
        # kubectl rollout status deployment/segmentation-service -n staging
        
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.alt-las.example.com/segmentation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Generate deployment configuration
      run: |
        cd segmentation-service
        python ci_cd_config.py --action generate --environment production --output deployment
        
    - name: Deploy to production environment
      run: |
        echo "Deploying segmentation-service to production environment"
        # In a real scenario, you would use kubectl, helm, or another deployment tool
        # kubectl apply -f segmentation-service/deployment.kubernetes.yml -n production
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment to production environment"
        # In a real scenario, you would check if the deployment was successful
        # kubectl rollout status deployment/segmentation-service -n production
