# OpenAPI Şema Dosyası

```yaml
openapi: 3.0.0
info:
  title: ALT_LAS API
  description: ALT_LAS projesi için API dokümantasyonu
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Geliştirme sunucusu
  - url: https://api.alt-las.example.com
    description: Üretim sunucusu
tags:
  - name: auth
    description: Kimlik doğrulama işlemleri
  - name: users
    description: Kullanıcı yönetimi işlemleri
  - name: tasks
    description: Görev yönetimi işlemleri
  - name: notifications
    description: Bildirim sistemi işlemleri
  - name: files
    description: Dosya yönetimi işlemleri
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Kullanıcı girişi
      description: Kullanıcı adı ve şifre ile giriş yapma
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Başarılı giriş
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Geçersiz kimlik bilgileri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - users
      summary: Kullanıcıları listele
      description: Tüm kullanıcıları listeler
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Sayfa numarası
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Sayfa başına kayıt sayısı
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Yetkisiz erişim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks:
    get:
      tags:
        - tasks
      summary: Görevleri listele
      description: Tüm görevleri listeler
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Sayfa numarası
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Sayfa başına kayıt sayısı
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Görev durumu
          schema:
            type: string
            enum: [pending, in_progress, completed, cancelled]
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Yetkisiz erişim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [admin, manager, user]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Rapor hazırlama"
        description:
          type: string
          example: "Aylık satış raporu hazırlanacak"
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
          example: "pending"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "medium"
        assignedTo:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        createdBy:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        dueDate:
          type: string
          format: date-time
          example: "2023-01-31T23:59:59Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Yeni görev atandı"
        message:
          type: string
          example: "Size yeni bir görev atandı: Rapor hazırlama"
        type:
          type: string
          enum: [task, system, message]
          example: "task"
        read:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: string
          example: "UNAUTHORIZED"
        message:
          type: string
          example: "Yetkisiz erişim"
        details:
          type: object
          example: null
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
```
