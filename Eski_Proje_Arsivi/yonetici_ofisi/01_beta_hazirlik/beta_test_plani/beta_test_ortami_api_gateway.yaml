apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secret
  namespace: alt-las
type: Opaque
data:
  JWT_SECRET: YWx0bGFzX2p3dF9zZWNyZXQ=  # altlas_jwt_secret
  API_KEY: YWx0bGFzX2FwaV9rZXk=  # altlas_api_key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: alt-las
data:
  config.json: |
    {
      "server": {
        "port": 8080,
        "cors": {
          "enabled": true,
          "origins": ["*"],
          "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
          "headers": ["Content-Type", "Authorization", "X-API-Key"]
        },
        "rateLimit": {
          "enabled": true,
          "windowMs": 60000,
          "max": 100
        }
      },
      "auth": {
        "jwtExpiresIn": "1h",
        "refreshTokenExpiresIn": "7d"
      },
      "services": {
        "segmentation": {
          "url": "http://segmentation-service:8081"
        },
        "runner": {
          "url": "http://runner-service:8082"
        },
        "archive": {
          "url": "http://archive-service:8083"
        },
        "ai-orchestrator": {
          "url": "http://ai-orchestrator:8084"
        }
      },
      "database": {
        "postgres": {
          "host": "postgresql.database.svc.cluster.local",
          "port": 5432,
          "user": "altlas",
          "password": "altlas",
          "database": "altlas_db"
        },
        "redis": {
          "host": "redis.database.svc.cluster.local",
          "port": 6379,
          "password": "altlas"
        }
      },
      "messaging": {
        "rabbitmq": {
          "host": "rabbitmq.messaging.svc.cluster.local",
          "port": 5672,
          "user": "altlas",
          "password": "altlas",
          "vhost": "/"
        }
      },
      "logging": {
        "level": "info",
        "format": "json"
      },
      "monitoring": {
        "enabled": true,
        "prometheus": {
          "enabled": true,
          "path": "/metrics"
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: alt-las
  labels:
    app: api-gateway
    environment: beta
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        environment: beta
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: altlas/api-gateway:beta
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          value: "beta"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-gateway-secret
              key: JWT_SECRET
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: api-gateway-secret
              key: API_KEY
        volumeMounts:
        - name: api-gateway-config
          mountPath: /app/config
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: api-gateway-config
        configMap:
          name: api-gateway-config
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: alt-las
  labels:
    app: api-gateway
    environment: beta
spec:
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30000
  selector:
    app: api-gateway
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: alt-las
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - host: api.beta.alt-las.com
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 8080
