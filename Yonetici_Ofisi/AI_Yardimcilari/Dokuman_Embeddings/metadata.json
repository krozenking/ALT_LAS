[
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_0",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 0,
        "text": "# Ana Görev Panosu (Master Task Board)"
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_1",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 1,
        "text": "Bu belge, ALT_LAS projesindeki tüm ana ve alt görevlerin merkezi olarak takip edildiği ana görev panosudur. Proje Yöneticisi tarafından güncel tutulur ve AI personalarının görevlerini buradan takip etmesi beklenir."
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_2",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 2,
        "text": "**Durumlar:**\n*   **Yapılacak (To Do):** Henüz başlanmamış görevler.\n*   **Devam Ediyor (In Progress):** Üzerinde aktif olarak çalışılan görevler.\n*   **Engellendi (Blocked):** İlerlemesi bir engele takılmış görevler (engel notlarda belirtilmelidir).\n*   **Gözden Geçirilecek (In Review):** Tamamlanmış ancak Proje Yöneticisi veya ilgili bir başka persona tarafından incelenmesi gereken görevler.\n*   **Tamamlandı (Completed):** Tüm adımları bitmiş ve onaylanmış görevler."
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_3",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 3,
        "text": "**Öncelikler:**\n*   **P0:** Çok Acil / Kritik Engleyici\n*   **P1:** Acil / Yüksek Öncelikli\n*   **P2:** Normal Öncelikli\n*   **P3:** Düşük Öncelikli\n*   **P4:** Ertelenebilir"
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_4",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 4,
        "text": "## Görev Listesi"
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_5",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 5,
        "text": "| Görev ID | Görev Adı                                      | Detay Linki (Persona Görev Dosyası)                                                                 | Atanan Persona                               | Durum         | Öncelik | Bağımlılıklar (Görev ID) | Tahmini Efor (gün) | Gerçekleşen Efor (gün) | Başlangıç Tarihi | Bitiş Tarihi | Notlar                                                                 |\n|----------|------------------------------------------------|-----------------------------------------------------------------------------------------------------|----------------------------------------------|---------------|---------|--------------------------|--------------------|------------------------|------------------|--------------|------------------------------------------------------------------------|\n| ÖRN-001  | Örnek Görev 1: Yönetici Ofisi Geliştirme       | `/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md` (ilgili bölüm) | Proje Yöneticisi (AI)                        | Devam Ediyor  | P1      | -                        | 3                  | -                      | 2025-05-14       |              | Yönetici Ofisi özelliklerinin implementasyonu.                         |\n| ÖRN-002  | Örnek Görev 2: CUDA PoC Raporu İncelemesi      | `/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Raporlar/AG-BE-POCREPORT-001_rapor.md` (oluşturulacak) | Yazılım Mimarı (Elif Yılmaz)                 | Yapılacak     | P2      | BE-POC-001               | 1                  | -                      |                  |              | Backend PoC raporunun mimari açıdan değerlendirilmesi.                 |\n| ...      | ...                                            | ...                                                                                                 | ...                                          | ...           | ...     | ...                      | ...                | ...                    | ...              | ...          | ...                                                                    |"
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_6",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 6,
        "text": "**Not:** Bu pano, projenin ilerleyişine göre Proje Yöneticisi (AI) tarafından düzenli olarak güncellenecektir. Yeni görevler eklendikçe veya mevcut görevlerin durumu değiştikçe bu tabloya yansıtılacaktır. Detaylı görev tanımları ve Atlas görevleri için \"Detay Linki\" sütunundaki ilgili persona görev dosyalarına başvurulmalıdır."
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_7",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 7,
        "text": "## Ayrı Durum Panoları (Opsiyonel)"
    },
    {
        "doc_id": "doc_0_ana_gorev_panosu.md_8",
        "source_file": "/Planlama_Ofisi/ana_gorev_panosu.md",
        "chunk_index": 8,
        "text": "İleride görev sayısı arttıkça, her durum için ayrı Markdown dosyaları oluşturulabilir ve bu ana panodan linklenebilir:\n*   `gorevler_yapilacak.md`\n*   `gorevler_devam_eden.md`\n*   `gorevler_engellendi.md`\n*   `gorevler_gozden_gecirilecek.md`\n*   `gorevler_tamamlandi.md`"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_0",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 0,
        "text": "# ALT_LAS Projesi: Hiyerarşik Görev Kırılım Yapısı ve Tamamlama Kriterleri (Güncellenmiş)"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_1",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 1,
        "text": "Bu belge, ALT_LAS projesinin CUDA entegrasyonu ve diğer geliştirme süreçleri için kullanıcı tarafından talep edilen detaylı hiyerarşik görev kırılım yapısını ve bu görevlerin tamamlanma kriterlerini, yeni oluşturulan `/` klasör yapısına uygun olarak tanımlamaktadır."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_2",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 2,
        "text": "## 1. Görev Hiyerarşisi Seviyeleri"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_3",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 3,
        "text": "Proje görevleri aşağıdaki hiyerarşik seviyelere bölünecektir:"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_4",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 4,
        "text": "1.  **Ana Görevler (Main Tasks / Phases):** Projenin büyük fazlarını veya ana bileşenlerini temsil eder. Örneğin, \"CUDA Entegrasyon Planlaması\", \"AI Orchestrator CUDA Entegrasyonu\", \"Lisans Uyumluluk Analizi\", \"Test ve Kalite Güvence\", \"Belgelendirme ve Raporlama\". Bu görevler genellikle `/Planlama_Ofisi/cuda_master_integration_plan.md` dosyasındaki ana başlıklara karşılık gelebilir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_5",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 5,
        "text": "2.  **Alt Görevler (Sub-Tasks):** Ana Görevlerin daha küçük, yönetilebilir parçalara bölünmüş halidir. Her bir Alt Görev, belirli bir çıktıya veya hedefe yönelik olmalıdır.\n    *   *Örnek:* Ana Görev \"AI Orchestrator CUDA Entegrasyonu\" ise, bir Alt Görev \"Model Çıkarım Motorunun TensorRT ile Optimizasyonu\" olabilir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_6",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 6,
        "text": "3.  **Makro Görevler (Macro-Tasks):** Alt Görevlerin daha da detaylandırıldığı, birkaç adımdan oluşan iş paketleridir. Bir Makro Görev, genellikle belirli bir uzmanlık alanına veya birkaç günlük bir çalışma süresine karşılık gelebilir.\n    *   *Örnek:* Alt Görev \"Model Çıkarım Motorunun TensorRT ile Optimizasyonu\" ise, bir Makro Görev \"Mevcut Modelin TensorRT için Hazırlanması ve Dönüştürülmesi\" olabilir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_7",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 7,
        "text": "4.  **Mikro Görevler (Micro-Tasks):** Makro Görevlerin en küçük, genellikle tek bir kişi tarafından kısa bir sürede (birkaç saat veya bir gün) tamamlanabilecek atomik iş birimleridir. Bir Mikro Görev, çok spesifik bir eylemi veya çıktıyı tanımlar.\n    *   *Örnek:* Makro Görev \"Mevcut Modelin TensorRT için Hazırlanması ve Dönüştürülmesi\" ise, bir Mikro Görev \"Modelin ONNX formatına dönüştürülmesi\" olabilir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_8",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 8,
        "text": "5.  **Atlas Görevleri (Atlas Tasks):** Kullanıcının tanımına göre, projenin \"alt\" (en alt seviye) ve \"last\" (son, temel) görevleridir. Bu görevler, bir nevi yol gösterici niteliğinde olup, bir Mikro Görevin gerçekleştirilmesi için gereken en temel adımları, kullanılacak modülleri, kütüphaneleri, diğer modül/kütüphane/özelliklerle olan ilişkileri ve bağımlılıkları detaylandırır. Her bir Atlas Görevi, bir Mikro Görevin nasıl hayata geçirileceğine dair teknik bir reçete sunar.\n    *   **Temel Özellikleri:**\n        *   **En Temel Birim:** Daha fazla alt parçaya bölünemeyen, en küçük iş adımıdır.\n        *   **Yol Gösterici:** Görevin nasıl yapılacağına dair spesifik talimatlar içerir.\n        *   **Modül/Kütüphane Bağlantısı:** Hangi kod modülünün (`/Proje_Kodu/` altındaki) etkileneceğini, hangi kütüphanenin (ve versiyonunun) kullanılacağını belirtir.\n        *   **Bağımlılık ve İlişki Detayları:** Diğer modüllerle, kütüphanelerle veya proje özellikleriyle olan etkileşimleri ve bağımlılıkları açıklar.\n        *   **Lisans Uyumluluğu Notu:** Kullanılacak kütüphane veya aracın lisans uyumluluğu (önceki analizlere göre) burada belirtilmelidir.\n    *   *Örnek:* Mikro Görev \"Modelin ONNX formatına dönüştürülmesi\" ise, bir Atlas Görevi şöyle olabilir:\n        *   **Atlas Görevi ID:** AG-ONNX-001\n        *   **Açıklama:** TensorFlow/PyTorch modelinin ONNX formatına dönüştürülmesi için `tf2onnx` / `torch.onnx.export` fonksiyonunun kullanılması.\n        *   **İlgili Modül:** `/Proje_Kodu/ai-orchestrator/model_converter.py`\n        *   **Kullanılacak Kütüphane(ler):** `tensorflow` (v2.x, Apache 2.0), `tf2onnx` (v1.x, MIT), `onnx` (v1.x, Apache 2.0) VEYA `pytorch` (v1.x, BSD-benzeri), `onnx` (v1.x, Apache 2.0).\n        *   **Bağımlılıklar/İlişkiler:** Dönüştürülen ONNX modelinin, TensorRT optimizasyon (Mikro Görev) adımı için girdi oluşturması.\n        *   **Lisans Uyumluluğu:** Kullanılan kütüphaneler (TensorFlow/PyTorch, tf2onnx, onnx) ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_9",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 9,
        "text": "## 2. Görev Tanımlama ve Sorumluluk"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_10",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 10,
        "text": "*   Her AI çalışanı (persona), kendi uzmanlık alanına ve sorumluluklarına giren Ana Görevler ve Alt Görevler için Makro, Mikro ve Atlas Görevlerini detaylandıracaktır. Bu detaylar, ilgili personanın `/Yonetici_Ofisi/Persona_Ofisleri/[Persona_Adi]_Ofisi/Calisma_Dosyalari/` altındaki görev tanım dosyalarında bulunacaktır.\n*   Bu detaylandırma, `/Planlama_Ofisi/cuda_master_integration_plan.md` ve `/Planlama_Ofisi/persona_tasks_and_suggestions_phase1_tasks.md` dosyalarındaki mevcut plan ve görev tanımları üzerine inşa edilecektir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_11",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 11,
        "text": "## 3. Görev Tamamlama Kriterleri (Yeni Klasör Yapısına Uygun)"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_12",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 12,
        "text": "Kullanıcının belirttiği üzere, her seviyedeki görevin (özellikle Mikro ve Atlas görevlerinin tamamlanmasıyla sonuçlanan Alt Görevlerin) tamamlanması için aşağıdaki adımlar zorunlu olacaktır:"
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_13",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 13,
        "text": "1.  **Raporlama:**\n    *   Görevin sonuçları, karşılaşılan zorluklar ve elde edilen çıktılar hakkında kısa bir rapor hazırlanacaktır.\n    *   Bu rapor, ilgili personanın ofisindeki `/Yonetici_Ofisi/Persona_Ofisleri/[Persona_Adi]_Ofisi/Raporlar/` klasörüne, görevi tanımlayan bir isimlendirme ile (örn: `AG-MIM-PLANREVIEW-001_rapor.md`) kaydedilecektir.\n    *   Proje Yöneticisi, bu raporları periyodik olarak gözden geçirecek ve genel proje ilerleme raporlarına dahil edecektir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_14",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 14,
        "text": "2.  **Dokümantasyon Güncellemesi:**\n    *   İlgili teknik dokümantasyon (kod içi yorumlar, `/Proje_Kodu/` altındaki README dosyaları, `/Yonetici_Ofisi/Genel_Belgeler/` altındaki wiki benzeri belgeler vb.) güncellenecektir.\n    *   Örneğin, bir API değişikliği yapıldıysa, API sözleşmesi (`/Yonetici_Ofisi/Genel_Belgeler/api_contracts.md` gibi merkezi bir yerde veya ilgili servis dokümanında) güncellenmelidir.\n    *   Yapılan değişikliğin niteliğine göre, Yazılım Mimarı veya ilgili teknik persona dokümantasyonun doğruluğunu ve bütünlüğünü teyit edecektir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_15",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 15,
        "text": "3.  **GitHub Push:**\n    *   Yapılan tüm kod değişiklikleri ve eklenen/güncellenen dokümantasyon dosyaları, projenin ana kod deposunun bulunduğu `/Proje_Kodu/` dizininden GitHub reposuna push edilecektir.\n    *   Kullanıcı tarafından sağlanan `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` tokenı, bu push işlemleri için yapılandırılmış olmalıdır.\n    *   Değişiklikler, genellikle `cuda_integration_feature_branch` gibi bir özellik dalına (feature branch) push edilecek, ardından ana dala (main/master) birleştirme (merge) işlemi için pull request (PR) açılacaktır.\n    *   PR açıklamalarında, tamamlanan görev(ler) ve yapılan değişiklikler net bir şekilde belirtilmelidir.\n    *   DevOps Mühendisi, CI/CD süreçlerinin bu push işlemlerini doğru şekilde tetiklediğinden ve testlerin başarıyla geçtiğinden emin olacaktır."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_16",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 16,
        "text": "4.  **Persona Gelişim Kaydı:**\n    *   İlgili AI çalışanı (persona), görevi tamamlarken öğrendiklerini, karşılaştığı zorlukları, geliştirdiği yetkinlikleri ve göreve dair özel notlarını, kendi ofisindeki `/Yonetici_Ofisi/Persona_Ofisleri/[Persona_Adi]_Ofisi/persona_gelisimi.md` dosyasına ekleyecektir.\n    *   Bu kayıt, personanın proje süresince gelişimini izlemek ve gelecekteki görevler için bir bilgi birikimi oluşturmak amacıyla tutulacaktır.\n    *   Proje Yöneticisi, bu gelişim kayıtlarının düzenli olarak güncellenmesini teşvik edecektir."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_17",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 17,
        "text": "5.  **Yönetici Ofisi Durum Güncellemesi:**\n    *   Bir AI persona bir göreve başladığında ve bitirdiğinde, `/Yonetici_Ofisi/ofis_durumu.md` dosyasındaki \"Koltuk Durumu\" ve \"Mevcut Aktif Görev\" bilgileri Proje Yöneticisi veya görevli persona tarafından güncellenecektir. Bu, projenin anlık durumunu ve hangi personanın ne üzerinde çalıştığını takip etmeyi kolaylaştıracaktır."
    },
    {
        "doc_id": "doc_1_hierarchical_task_structure_definition.md_18",
        "source_file": "/Planlama_Ofisi/hierarchical_task_structure_definition.md",
        "chunk_index": 18,
        "text": "Bu hiyerarşik yapı ve güncellenmiş tamamlama kriterleri, projenin karmaşıklığını yönetmeyi, ilerlemeyi daha şeffaf bir şekilde takip etmeyi ve her bir AI çalışanın katkılarını ve gelişimini yeni klasör yapısı içinde etkin bir şekilde belgelemeyi amaçlamaktadır."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_0",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 0,
        "text": "# Yönetici Ofisi Kullanım Kılavuzu"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_1",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 1,
        "text": "Bu kılavuz, ALT_LAS projesi kapsamında geliştirilen Yönetici Ofisi özelliklerinin nasıl kullanılacağını açıklar. Amaç, AI personalarına görev atama, takip ve genel proje yönetim süreçlerini kolaylaştırmaktır."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_2",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 2,
        "text": "## 1. Temel Klasör Yapısı"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_3",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 3,
        "text": "Yönetici Ofisi ve ilgili planlama dosyaları `/` ana dizini altında aşağıdaki gibi yapılandırılmıştır:"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_4",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 4,
        "text": "*   **`/Planlama_Ofisi/`**: Ana planlama belgelerini içerir.\n    *   `ana_gorev_panosu.md`: Tüm görevlerin merkezi olarak takip edildiği ana pano.\n    *   `hierarchical_task_structure_definition.md`: Görev hiyerarşisi, tamamlama kriterleri ve raporlama süreçlerini tanımlar.\n*   **`/Yonetici_Ofisi/`**: Yönetimsel dosyalar ve persona ofislerini barındırır.\n    *   `ofis_durumu.md`: Yönetici Ofisi'nin anlık durumunu ve önemli metrikleri gösteren panel.\n    *   `Genel_Belgeler/`:\n        *   `standart_gorev_atama_sablonu.md`: AI personalarına görev atamak için kullanılacak standart şablon.\n        *   `license_analysis_summary.md`, `api_contracts.md` vb. genel proje dokümanları.\n    *   `Persona_Ofisleri/`: Her AI persona için ayrı bir ofis.\n        *   `[Persona_Adi]_Ofisi/Calisma_Dosyalari/`: Personaya özel detaylı görev tanımları.\n        *   `[Persona_Adi]_Ofisi/Raporlar/`: Personanın tamamladığı görevlere ait raporlar.\n        *   `[Persona_Adi]_Ofisi/persona_gelisimi.md`: Personanın gelişim ve öğrenme kayıtları.\n    *   `yonetici_ofisi_gelistirme_todo.md`: Bu geliştirme sürecinin takibi için kullanılan yapılacaklar listesi."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_5",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 5,
        "text": "## 2. Ana Görev Panosu (`ana_gorev_panosu.md`)"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_6",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 6,
        "text": "*   **Amaç:** Projedeki tüm ana ve alt görevlerin merkezi olarak listelenmesi, durumlarının, önceliklerinin, atanan personaların ve diğer önemli bilgilerin takip edilmesi.\n*   **Kullanım:**\n    1.  **Proje Yöneticisi (AI):** Yeni görevleri bu panoya ekler, mevcut görevlerin durumunu, önceliğini, atanan personayı, efor ve tarih bilgilerini günceller.\n    2.  **AI Personaları:** Kendilerine atanan görevleri ve bu görevlerin detaylarını (Detay Linki üzerinden) buradan takip eder.\n    3.  **Sütunlar:**\n        *   `Görev ID`: Benzersiz görev tanımlayıcı.\n        *   `Görev Adı`: Görevin kısa açıklaması.\n        *   `Detay Linki`: İlgili personanın çalışma dosyasındaki detaylı görev tanımına bağlantı.\n        *   `Atanan Persona`: Görevden sorumlu AI persona.\n        *   `Durum`: Yapılacak, Devam Ediyor, Engellendi, Gözden Geçirilecek, Tamamlandı.\n        *   `Öncelik`: P0 (Çok Acil) - P4 (Ertelenebilir).\n        *   `Bağımlılıklar`: Bu görevin başlaması için tamamlanması gereken diğer görevlerin ID'leri.\n        *   `Tahmini/Gerçekleşen Efor`: Görevin tamamlanması için öngörülen ve harcanan süre (gün).\n        *   `Başlangıç/Bitiş Tarihi`: Görevin planlanan veya gerçekleşen tarihleri.\n        *   `Notlar`: Görevle ilgili ek açıklamalar, engeller vb.\n*   **Güncelleme Sıklığı:** Proje Yöneticisi tarafından sürekli güncel tutulmalıdır."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_7",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 7,
        "text": "## 3. Standart Görev Atama Şablonu (`standart_gorev_atama_sablonu.md`)"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_8",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 8,
        "text": "*   **Amaç:** AI personalarına görev atarken tutarlı ve eksiksiz bilgi sağlamak.\n*   **Kullanım:**\n    1.  **Proje Yöneticisi (AI):** Yeni bir görev atayacağı zaman bu şablonu kopyalar ve göreve özel bilgilerle doldurur.\n    2.  Doldurulan görev tanımı, ya `ana_gorev_panosu.md`'deki ilgili görevin \"Notlar\" kısmına eklenir ya da ilgili personanın `Calisma_Dosyalari/` klasörüne ayrı bir `.md` dosyası olarak kaydedilir ve panodan linklenir.\n    3.  **Bölümler:**\n        *   `Görev Tanım Bilgileri`: ID, ad, atanan, tarihler, öncelik, bağımlılıklar.\n        *   `Görev Açıklaması ve Kapsamı`: Detaylı görev tanımı.\n        *   `Gerekli Girdiler`: Görevin yapılması için gereken tüm dosyalar, veriler, parametreler ve konumları.\n        *   `Beklenen Çıktılar (Teslim Edilecekler)`: Görev sonunda teslim edilmesi beklenen tüm dosyalar, raporlar, kodlar ve konumları/formatları.\n        *   `Kabul Kriterleri`: Görevin tamamlanmış sayılması için karşılanması gereken şartlar.\n        *   `Ek Notlar ve Talimatlar`: Diğer önemli bilgiler."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_9",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 9,
        "text": "## 4. Yönetici Ofisi Durum Paneli (`ofis_durumu.md`)"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_10",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 10,
        "text": "*   **Amaç:** Projenin ve Yönetici Ofisi'nin anlık durumuna dair hızlı bir genel bakış sunmak.\n*   **Kullanım:**\n    1.  **Proje Yöneticisi (AI):** Bu paneli düzenli olarak günceller.\n        *   Ofis doluluk durumu ve aktif çalışan persona bilgilerini günceller.\n        *   `ana_gorev_panosu.md`'den özet metrikleri (aktif görev sayısı, engellenmiş görev sayısı vb.) bu panele taşır.\n        *   Acil görevler ve en yüksek öncelikli işler hakkında bilgi verir.\n        *   Proje sağlığı ve önemli kilometre taşları hakkında özet bilgi sunar.\n    2.  **Tüm Ekip Üyeleri:** Projenin genel durumu hakkında hızlı bilgi almak için bu paneli kullanabilir.\n*   **Bölümler:** Ofis Doluluk, Merkezi Görev Panosu Özeti, Acil Görevler, Proje Sağlığı, Hızlı Erişim Bağlantıları."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_11",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 11,
        "text": "## 5. Görev Tamamlama Süreci (Genel Akış)"
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_12",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 12,
        "text": "1.  **Görev Atama:** Proje Yöneticisi, `ana_gorev_panosu.md`'ye yeni bir görev ekler ve `standart_gorev_atama_sablonu.md` kullanarak görev detaylarını oluşturur. Görevi bir AI personasına atar.\n2.  **Görev Başlangıcı:** Atanan AI persona, `ofis_durumu.md`'yi (veya Proje Yöneticisi) güncelleyerek göreve başladığını belirtir.\n3.  **Görev Yürütme:** AI persona, görev tanımındaki girdileri kullanarak ve beklenen çıktıları hedefleyerek görevi yürütür.\n4.  **Görev Tamamlama Kriterlerinin Yerine Getirilmesi:**\n    *   **Raporlama:** Görev raporunu `/Raporlar/` klasörüne kaydeder.\n    *   **Dokümantasyon:** Gerekli teknik dokümanları günceller.\n    *   **GitHub Push:** Kod ve doküman değişikliklerini GitHub'a push eder.\n    *   **Persona Gelişim Kaydı:** `persona_gelisimi.md` dosyasını günceller.\n5.  **Durum Güncelleme:** AI persona, `ana_gorev_panosu.md`'deki görevin durumunu \"Gözden Geçirilecek\" olarak günceller (veya Proje Yöneticisine bildirir).\n6.  **Gözden Geçirme:** Proje Yöneticisi (veya ilgili diğer persona) çıktıyı inceler.\n7.  **Onay ve Kapanış:** Görev kabul edilirse, Proje Yöneticisi durumu \"Tamamlandı\" olarak günceller. `ofis_durumu.md` de buna göre güncellenir."
    },
    {
        "doc_id": "doc_2_YONETICI_OFISI_KULLANIM_KILAVUZU.md_13",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md",
        "chunk_index": 13,
        "text": "Bu kılavuz, Yönetici Ofisi'nin etkin kullanımına yardımcı olmayı amaçlamaktadır. Süreçler ve belgeler, projenin ihtiyaçlarına göre zamanla daha da geliştirilebilir."
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_0",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 0,
        "text": "# Standart Görev Atama Şablonu (Girdi/Çıktı Formatı)"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_1",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 1,
        "text": "Bu şablon, ALT_LAS projesindeki AI personalarına görev ataması yapılırken kullanılacak standart formatı tanımlar. Proje Yöneticisi (veya görev atayan yetkili) tarafından her yeni görev için doldurulur ve ilgili personanın çalışma dosyalarına veya merkezi bir görev tanımına eklenir."
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_2",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 2,
        "text": "## Görev Tanım Bilgileri"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_3",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 3,
        "text": "*   **Görev ID:** (Ana Görev Panosundaki ID ile aynı olmalı, örn: `BE-HOTSPOT-SEGSERV-001`)\n*   **Görev Adı:** (Ana Görev Panosundaki Ad ile aynı olmalı)\n*   **Atanan Persona:** (Görevi yapacak AI personasının adı, örn: Kıdemli Backend Geliştirici - Ahmet Çelik)\n*   **Atama Tarihi:** YYYY-AA-GG\n*   **İstenen Bitiş Tarihi (Tahmini):** YYYY-AA-GG\n*   **Öncelik:** (P0, P1, P2, P3, P4 - Ana Görev Panosu ile uyumlu)\n*   **Üst Görev(ler) (Varsa):** (Bu görevin parçası olduğu Makro veya Alt Görev ID/Adı)\n*   **Bağlı Olduğu Görev(ler) (Varsa):** (Bu görevin başlayabilmesi için tamamlanması gereken diğer görevlerin IDleri)"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_4",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 4,
        "text": "## Görev Açıklaması ve Kapsamı"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_5",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 5,
        "text": "[Bu bölümde görevin ne olduğu, neden yapıldığı ve genel hedefleri detaylı bir şekilde açıklanır. Kullanıcının veya Proje Yöneticisinin beklentileri net bir şekilde ifade edilir.]"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_6",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 6,
        "text": "## Gerekli Girdiler"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_7",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 7,
        "text": "Bu bölümde, görevin başarıyla tamamlanabilmesi için AI personasının ihtiyaç duyacağı tüm girdiler listelenir. Her girdi için dosya yolu, veri formatı, erişim bilgileri veya ilgili parametreler belirtilmelidir."
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_8",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 8,
        "text": "1.  **Girdi Adı/Türü:** [Örn: Ham Metin Veri Seti]\n    *   **Kaynak/Konum:** [`/Proje_Kodu/datasets/raw_text_corpus.zip`]\n    *   **Format/Özellikler:** [Örn: ZIP içinde .txt dosyaları, UTF-8 encoding, her satır bir doküman]\n    *   **Notlar:** [Örn: Sadece ilk 1000 doküman üzerinde çalışılacak.]"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_9",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 9,
        "text": "2.  **Girdi Adı/Türü:** [Örn: Model Konfigürasyon Parametreleri]\n    *   **Kaynak/Konum:** [Proje Yöneticisi tarafından sağlanacak JSON string veya dosya yolu]\n    *   **Format/Özellikler:** [Örn: `{ \"learning_rate\": 0.001, \"epochs\": 10 }`]\n    *   **Notlar:**"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_10",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 10,
        "text": "3.  **Girdi Adı/Türü:** [Örn: Mevcut Kaynak Kodu Modülü]\n    *   **Kaynak/Konum:** [`/Proje_Kodu/segmentation-service/services/parallel_processing_optimizer.py`]\n    *   **Format/Özellikler:** [Python modülü]\n    *   **Notlar:** [Örn: Bu modüldeki `calculate_similarity_cpu` fonksiyonu referans alınacak.]"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_11",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 11,
        "text": "## Beklenen Çıktılar (Teslim Edilecekler)"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_12",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 12,
        "text": "Bu bölümde, görevin tamamlanması sonucunda AI personasından beklenen tüm çıktılar listelenir. Her çıktı için dosya formatı, kaydedileceği konum ve içeriğine dair beklentiler belirtilmelidir."
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_13",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 13,
        "text": "1.  **Çıktı Adı/Türü:** [Örn: CUDA ile Hızlandırılmış Fonksiyon]\n    *   **Teslim Edilecek Konum:** [`/Proje_Kodu/segmentation-service/services/parallel_processing_optimizer.py` (güncellenmiş dosya) veya yeni bir modül]\n    *   **Format/Özellikler:** [Örn: `calculate_similarity_gpu_cupy` adında yeni bir Python fonksiyonu, CuPy kütüphanesi kullanılarak yazılmış, detaylı kod içi yorumlar içermeli.]\n    *   **Notlar:** [Örn: Fonksiyon, CPU versiyonu ile aynı girdileri alıp aynı formatta çıktı üretmelidir.]"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_14",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 14,
        "text": "2.  **Çıktı Adı/Türü:** [Örn: Birim Testleri]\n    *   **Teslim Edilecek Konum:** [`/Proje_Kodu/segmentation-service/tests/gpu/test_cosine_similarity_gpu.py` (yeni dosya)]\n    *   **Format/Özellikler:** [Örn: `pytest` formatında yazılmış, pozitif/negatif/sınır durumlarını içeren en az 5 adet test senaryosu.]\n    *   **Notlar:**"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_15",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 15,
        "text": "3.  **Çıktı Adı/Türü:** [Örn: Görev Tamamlama Raporu]\n    *   **Teslim Edilecek Konum:** [`/Yonetici_Ofisi/Persona_Ofisleri/[Persona_Adi]_Ofisi/Raporlar/[Görev_ID]_rapor.md`]\n    *   **Format/Özellikler:** [Markdown formatında, yapılanlar, karşılaşılan zorluklar, performans karşılaştırması (varsa), öneriler gibi bölümleri içermeli.]\n    *   **Notlar:**"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_16",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 16,
        "text": "4.  **Çıktı Adı/Türü:** [Örn: Güncellenmiş Teknik Dokümantasyon (varsa)]\n    *   **Teslim Edilecek Konum:** [İlgili README dosyası veya `/Yonetici_Ofisi/Genel_Belgeler/` altındaki ilgili doküman.]\n    *   **Format/Özellikler:** [Yapılan değişiklikleri yansıtan güncellemeler.]\n    *   **Notlar:**"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_17",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 17,
        "text": "## Kabul Kriterleri"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_18",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 18,
        "text": "*   [Örn: Tüm beklenen çıktılar eksiksiz ve belirtilen formatlarda teslim edilmiştir.]\n*   [Örn: Yazılan kod, proje kodlama standartlarına uygundur ve yorum satırları yeterlidir.]\n*   [Örn: Birim testleri %100 başarıyla geçmektedir.]\n*   [Örn: CUDA ile hızlandırılmış fonksiyon, CPU versiyonuna göre en az %X performans artışı sağlamaktadır (belirli bir test senaryosunda).]\n*   [Örn: Görev tamamlama raporu açık, anlaşılır ve tüm gerekli bilgileri içermektedir.]\n*   [Örn: İlgili `persona_gelisimi.md` dosyası güncellenmiştir.]\n*   [Örn: Tüm değişiklikler GitHub reposuna push edilmiştir (`cuda_integration_feature_branch`).]"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_19",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 19,
        "text": "## Ek Notlar ve Talimatlar"
    },
    {
        "doc_id": "doc_3_standart_gorev_atama_sablonu.md_20",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md",
        "chunk_index": 20,
        "text": "[Görevle ilgili diğer önemli notlar, özel talimatlar veya dikkat edilmesi gereken hususlar bu bölümde belirtilir.]"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_0",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 0,
        "text": "# Yönetici Ofisi Durum Paneli (Gelişmiş)"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_1",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 1,
        "text": "Bu belge, ALT_LAS projesi Yönetici Ofisi'nin anlık durumunu ve önemli proje metriklerini gösterir."
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_2",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 2,
        "text": "## 1. Ofis Doluluk Durumu ve Aktif Görev"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_3",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 3,
        "text": "*   **Toplam Koltuk Sayısı:** 1\n*   **Dolu Koltuk Sayısı:** 0 (Proje Yöneticisi tarafından güncellenir)\n*   **Boş Koltuk Sayısı:** 1 (Proje Yöneticisi tarafından güncellenir)\n*   **Mevcut Çalışan Persona:** Yok (Proje Yöneticisi tarafından güncellenir)\n*   **Aktif Ana/Alt Görev ID:** Henüz bir görev aktif değil.\n*   **Aktif Görev Adı:** -\n*   **Sorumlu Persona (Aktif Görev):** Yok\n*   **Aktif Görev Başlangıç Tarihi:** -\n*   **Aktif Görev Tahmini Bitiş Tarihi:** -"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_4",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 4,
        "text": "## 2. Merkezi Görev Panosu Özeti"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_5",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 5,
        "text": "*   **Ana Görev Panosu Linki:** [`/Planlama_Ofisi/ana_gorev_panosu.md`](/Planlama_Ofisi/ana_gorev_panosu.md)\n*   **Toplam Aktif Görev Sayısı (Devam Ediyor):** [Proje Yöneticisi tarafından `ana_gorev_panosu.md` üzerinden sayılır ve güncellenir]\n*   **Toplam Yapılacak Görev Sayısı:** [Proje Yöneticisi tarafından `ana_gorev_panosu.md` üzerinden sayılır ve güncellenir]\n*   **Engellenmiş Görev Sayısı:** [Proje Yöneticisi tarafından `ana_gorev_panosu.md` üzerinden sayılır ve güncellenir]\n*   **Gözden Geçirilecek Görev Sayısı:** [Proje Yöneticisi tarafından `ana_gorev_panosu.md` üzerinden sayılır ve güncellenir]"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_6",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 6,
        "text": "## 3. Acil Görevler ve Öncelikli İşler"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_7",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 7,
        "text": "*   **Acil Görevler Klasörü:** [`/Acil_Gorevler/`](/Acil_Gorevler/) (Kontrol ediniz)\n*   **En Yüksek Öncelikli Aktif Olmayan Görev (P0/P1):** [Proje Yöneticisi tarafından `ana_gorev_panosu.md` üzerinden belirlenir ve güncellenir]"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_8",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 8,
        "text": "## 4. Proje Sağlığı ve İlerleme"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_9",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 9,
        "text": "*   **Genel Proje İlerleme Raporları:** `/Yonetici_Ofisi/Genel_Belgeler/Proje_Ilerleme_Raporlari/` (Proje Yöneticisi tarafından periyodik olarak oluşturulur)\n*   **Son Tamamlanan Önemli Kilometre Taşı:** [Proje Yöneticisi tarafından güncellenir]\n*   **Yaklaşan Önemli Teslim Tarihleri:** [Proje Yöneticisi tarafından güncellenir]"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_10",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 10,
        "text": "## 5. Hızlı Erişim Bağlantıları"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_11",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 11,
        "text": "*   **Standart Görev Atama Şablonu:** [`/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md`](/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md)\n*   **Hiyerarşik Görev Yapısı ve Tamamlama Kriterleri:** [`/Planlama_Ofisi/hierarchical_task_structure_definition.md`](/Planlama_Ofisi/hierarchical_task_structure_definition.md)\n*   **Tüm Persona Ofisleri:** [`/Yonetici_Ofisi/Persona_Ofisleri/`](/Yonetici_Ofisi/Persona_Ofisleri/)"
    },
    {
        "doc_id": "doc_4_ofis_durumu.md_12",
        "source_file": "/Yonetici_Ofisi/ofis_durumu.md",
        "chunk_index": 12,
        "text": "**Not:** Bu panel, Proje Yöneticisi (AI) tarafından düzenli olarak güncellenmelidir. Özellikle görev durumları ve proje metrikleri `ana_gorev_panosu.md` ile senkronize olmalıdır."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# Yazılım Mimarı (Elif Yılmaz) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, Yazılım Mimarı (Elif Yılmaz) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** ALT_LAS Projesi için CUDA Entegrasyon Mimarisi Tasarımı, Rafinasyonu ve Genel Teknik Tutarlılığın Sağlanması."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: Mevcut CUDA Entegrasyon Planının İncelenmesi ve Mimari Uyum Analizi"
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** `/cuda_integration_plan.md` dosyasındaki genel planın, projenin mevcut mimarisi, ölçeklenebilirlik hedefleri ve uzun vadeli vizyonuyla uyumunun sağlanması."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: `/cuda_integration_plan.md` Dosyasının Detaylı Mimari İncelemesi\n    *   **Açıklama:** Plandaki her bir bölümün mimari etkilerinin ve gereksinimlerinin değerlendirilmesi.\n    *   **Mikro Görev 1.1.1:** Plandaki \"Hazırlık ve Ortam Kurulumu\" (Bölüm 1) bölümünün mimari açıdan incelenmesi.\n        *   **Atlas Görevi AG-MIM-PLANREVIEW-001:**\n            *   **Açıklama:** Geliştirme ortamı standardizasyonu, donanım uyumluluğu ve sürüm yönetimi gibi mimari gereksinimlerin planla tutarlılığının kontrolü.\n            *   **İlgili Modül/Belge:** `cuda_integration_plan.md` (Bölüm 1), Proje Mimari Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Belge incelemesi).\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (ortam kurulumu), Yönetici (donanım tedariki).\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 1.1.2:** Plandaki \"Performans Analizi ve Hızlandırma Adayları\" (Bölüm 2) bölümünün mimari açıdan incelenmesi.\n        *   **Atlas Görevi AG-MIM-PLANREVIEW-002:**\n            *   **Açıklama:** Mimarinin hangi bileşenlerinin profilleneceği, performans metriklerinin nasıl toplanacağı ve bu sürecin mimari tasarıma etkilerinin değerlendirilmesi.\n            *   **İlgili Modül/Belge:** `cuda_integration_plan.md` (Bölüm 2), İlgili servislerin (`ai-orchestrator`, `segmentation-service`) mimari şemaları.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Belge incelemesi).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici, Veri Bilimcisi (profilleme ve aday belirleme).\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 1.1.3:** Plandaki \"Modüler CUDA Geliştirme ve Entegrasyon\" (Bölüm 3) bölümünün mimari açıdan incelenmesi.\n        *   **Atlas Görevi AG-MIM-PLANREVIEW-003:**\n            *   **Açıklama:** Önerilen modüler geliştirme yaklaşımının, mevcut mikroservis yapısıyla ve genel mimari prensiplerle (örn. API tasarımı, veri izolasyonu) uyumunun değerlendirilmesi.\n            *   **İlgili Modül/Belge:** `cuda_integration_plan.md` (Bölüm 3), Servis mimari dokümanları.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Belge incelemesi).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici, Veri Bilimcisi.\n            *   **Lisans Uyumluluğu:** N/A.\n    *   *(Plandaki diğer bölümler (API Tasarımı, Test, Dağıtım, İzleme) için benzer Mikro ve Atlas görevleri eklenecektir.)*"
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Makro Görev 1.2: Proje Mimarisi ve Vizyonu ile CUDA Planının Uyum Değerlendirmesi\n    *   **Açıklama:** Projenin mevcut mikroservis mimarisi, ölçeklenebilirlik hedefleri ve uzun vadeli vizyonu ile genel CUDA entegrasyon planının stratejik uyumunun sağlanması.\n    *   **Mikro Görev 1.2.1:** Mikroservislerin CUDA entegrasyonundan mimari olarak nasıl etkileneceğinin analizi.\n        *   **Atlas Görevi AG-MIM-MICROSERV-001:**\n            *   **Açıklama:** `ai-orchestrator` servisinin CUDA ile ölçeklenebilirlik (yatay/dikey) stratejilerinin ve diğer servislerle (özellikle GPU kullananlar) olan iletişim arayüzlerinin optimizasyon ihtiyaçlarının belirlenmesi.\n            *   **İlgili Modül/Belge:** `ai-orchestrator` mimari dokümanı, `cuda_integration_plan.md`, Ölçeklenebilirlik Hedefleri Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** Mimari diyagram araçları (örn. draw.io - web tabanlı, lisansı geliştirme aracına özgü).\n            *   **Bağımlılıklar/İlişkiler:** `segmentation-service`, potansiyel yeni GPU servisleri, DevOps (dağıtım ve kaynak yönetimi).\n            *   **Lisans Uyumluluğu:** N/A (Araç için).\n        *   **Atlas Görevi AG-MIM-MICROSERV-002:**\n            *   **Açıklama:** `segmentation-service` servisinin CUDA ile ölçeklenebilirlik stratejilerinin ve `ai-orchestrator` ile veri alışveriş mekanizmalarının (örn. büyük veri transferleri) mimari açıdan değerlendirilmesi.\n            *   **İlgili Modül/Belge:** `segmentation-service` mimari dokümanı, `cuda_integration_plan.md`.\n            *   **Kullanılacak Kütüphane/Araç:** Mimari diyagram araçları.\n            *   **Bağımlılıklar/İlişkiler:** `ai-orchestrator`, Veri Bilimcisi (veri formatları).\n            *   **Lisans Uyumluluğu:** N/A (Araç için).\n    *   **Mikro Görev 1.2.2:** Uzun vadeli vizyon (yeni AI modelleri, artan yük) doğrultusunda CUDA mimarisinin esnekliğinin ve genişletilebilirliğinin değerlendirilmesi.\n        *   **Atlas Görevi AG-MIM-VISION-001:**\n            *   **Açıklama:** Gelecekte eklenebilecek yeni GPU-yoğun servisler için mimaride genel bir \"GPU Servis Entegrasyon Şablonu\" veya standart arayüzler (API sözleşmeleri, veri formatları) tanımlanması.\n            *   **İlgili Modül/Belge:** Proje Vizyon Dokümanı, `cuda_integration_plan.md`.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Kavramsal tasarım ve dokümantasyon).\n            *   **Bağımlılıklar/İlişkiler:** Tüm geliştirme ekibi, Yönetici.\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "## Alt Görev 2: CUDA Entegrasyonu için Mimari Yaklaşımın Rafine Edilmesi"
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "*   **Açıklama:** CUDA ile hızlandırılacak servisler arasındaki etkileşim desenlerinin, veri akışlarının ve API sözleşmelerinin netleştirilerek mimari tasarımın detaylandırılması."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "### Makro Görev 2.1: Servisler Arası Etkileşim Desenlerinin Tanımlanması\n    *   **Açıklama:** CUDA ile hızlandırılacak servisler arasında (örn. `ai-orchestrator` ve `segmentation-service`) ve bu servislerle diğer CPU-bağımlı servisler arasında kullanılacak etkileşim desenlerinin (senkron/asenkron çağrılar, mesaj kuyrukları, paylaşımlı bellek, RPC vb.) belirlenmesi ve optimize edilmesi.\n    *   **Mikro Görev 2.1.1:** `ai-orchestrator` ve `segmentation-service` arasındaki büyük veri transferleri için (örn. işlenmiş metin, segmentasyon sonuçları) en uygun etkileşim deseninin seçilmesi ve tasarlanması.\n        *   **Atlas Görevi AG-MIM-INTERACT-001:**\n            *   **Açıklama:** Apache Arrow veya benzeri bir zero-copy serileştirme kütüphanesinin, gRPC ile birlikte kullanılarak servisler arası yüksek performanslı veri transferi için fizibilitesinin araştırılması ve mimari tasarımının yapılması.\n            *   **İlgili Modül/Belge:** `ai-orchestrator` API, `segmentation-service` API, Proje Mimari Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** `Apache Arrow` (Apache 2.0), `gRPC` (Apache 2.0).\n            *   **Bağımlılıklar/İlişkiler:** Veri formatları, API sözleşmeleri, Kıdemli Backend Geliştirici.\n            *   **Lisans Uyumluluğu:** Apache Arrow ve gRPC ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "### Makro Görev 2.2: Detaylı Veri Akış Diyagramlarının Oluşturulması\n    *   **Açıklama:** CUDA entegrasyonunu içeren tüm kritik iş akışları için detaylı veri akış diyagramlarının (CPU-GPU arası veri transferleri, GPU-GPU arası veri transferleri, servisler arası veri akışları) oluşturulması.\n    *   **Mikro Görev 2.2.1:** `ai-orchestrator` servisinin bir model çıkarım isteğini işlemesi senaryosu için uçtan uca veri akış diyagramının çizilmesi.\n        *   **Atlas Görevi AG-MIM-DATAFLOW-001:**\n            *   **Açıklama:** İsteğin alınması, verinin GPU belleğine kopyalanması, TensorRT motoru ile çıkarımın yapılması, sonucun CPU belleğine geri kopyalanması ve API üzerinden yanıtlanması adımlarını içeren veri akışının detaylı olarak görselleştirilmesi.\n            *   **İlgili Modül/Belge:** `ai-orchestrator` servis dokümantasyonu, `cuda_integration_plan.md`.\n            *   **Kullanılacak Kütüphane/Araç:** Mimari diyagram aracı (örn. draw.io).\n            *   **Bağımlılıklar/İlişkiler:** API sözleşmeleri, Veri Bilimcisi (TensorRT motor detayları).\n            *   **Lisans Uyumluluğu:** N/A (Araç için)."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "### Makro Görev 2.3: Güncellenmiş API Sözleşmelerinin Tanımlanması (Öneri S1.2 ile ilişkili)\n    *   **Açıklama:** CUDA ile hızlandırılmış fonksiyonlar ve servisler için mevcut API sözleşmelerinin gözden geçirilmesi, gerekirse yeni endpointlerin, veri formatlarının veya meta verilerin (örn. işlem süresi, kullanılan GPU kaynağı) tanımlanması.\n    *   **Mikro Görev 2.3.1:** Asenkron operasyon gerektiren CUDA işlemleri (örn. uzun süren model eğitimleri veya büyük veri analizleri) için API tasarım prensiplerinin belirlenmesi.\n        *   **Atlas Görevi AG-MIM-APIASYNC-001:**\n            *   **Açıklama:** Asenkron görevler için bir \"iş gönder, durum sorgula, sonuç al\" API deseninin standartlaştırılması ve `ai-orchestrator` veya `segmentation-service` gibi servislerde potansiyel uygulama noktalarının belirlenmesi.\n            *   **İlgili Modül/Belge:** API Tasarım Kılavuzu, `cuda_integration_plan.md`.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Tasarım ve dokümantasyon).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici, Kıdemli Frontend Geliştirici (kullanıcı deneyimi).\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "## Alt Görev 3: Kritik Servisler için Detaylı CUDA Mimarisi Şemalarının Oluşturulması"
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_13",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 13,
        "text": "*   **Açıklama:** `ai-orchestrator` ve `segmentation-service` gibi CUDA entegrasyonunun odak noktasında olan servisler için detaylı iç mimari şemalarının, bileşenlerinin, arayüzlerinin ve GPU kaynak yönetimi stratejilerinin oluşturulması."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_14",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 14,
        "text": "### Makro Görev 3.1: `ai-orchestrator` Servisi için Detaylı CUDA Mimarisi\n    *   **Açıklama:** `ai-orchestrator` servisinin, farklı AI modellerini (TensorFlow, PyTorch, TensorRT) GPU üzerinde verimli bir şekilde yönetmesi ve çalıştırması için iç mimarisinin tasarlanması.\n    *   **Mikro Görev 3.1.1:** `ai-orchestrator` içinde TensorRT motorlarının yüklenmesi, yönetilmesi (örn. farklı versiyonlar, farklı optimizasyon profilleri) ve gelen isteklere göre uygun motorun seçilip kullanılması için bir \"TensorRT Motor Yöneticisi\" bileşeninin mimari olarak tasarlanması.\n        *   **Atlas Görevi AG-MIM-AIORCH-TRTMGR-001:**\n            *   **Açıklama:** TensorRT Motor Yöneticisi bileşeninin sorumluluklarının, arayüzlerinin (diğer `ai-orchestrator` bileşenleriyle), yapılandırma seçeneklerinin ve GPU bellek yönetimi stratejilerinin (örn. motorların GPU belleğinde ne zaman tutulacağı/çıkarılacağı) tanımlanması.\n            *   **İlgili Modül/Belge:** `ai-orchestrator` mimari dokümanı, Veri Bilimcisi (TensorRT motor özellikleri).\n            *   **Kullanılacak Kütüphane/Araç:** Mimari diyagram aracı.\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (GPU kaynak izleme ve tahsisi), Veri Bilimcisi.\n            *   **Lisans Uyumluluğu:** N/A (Araç için)."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_15",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 15,
        "text": "### Makro Görev 3.2: `segmentation-service` Servisi için Detaylı CUDA Mimarisi\n    *   **Açıklama:** `segmentation-service` servisinin, metin işleme ve segmentasyon algoritmalarını CUDA kullanarak hızlandırması için iç mimarisinin tasarlanması.\n    *   **Mikro Görev 3.2.1:** `segmentation-service` içinde CUDA çekirdeklerinin veya CuPy/Numba ile yazılmış GPU fonksiyonlarının ana Python iş akışına nasıl entegre edileceğinin, CPU ile GPU arasındaki veri transferlerinin nasıl minimize edileceğinin ve hata yönetiminin nasıl yapılacağının mimari olarak tasarlanması.\n        *   **Atlas Görevi AG-MIM-SEGSERV-CUDAINT-001:**\n            *   **Açıklama:** `parallel_processing_optimizer.py` modülündeki GPU’ya taşınacak fonksiyonlar için net giriş/çıkış arayüzlerinin, kullanılacak GPU bellek ayırma stratejilerinin (örn. CuPy memory pool) ve CPU ile GPU arasındaki asenkron veri transfer mekanizmalarının tanımlanması.\n            *   **İlgili Modül/Belge:** `segmentation-service/parallel_processing_optimizer.py` kaynak kodu, `cuda_integration_plan.md`.\n            *   **Kullanılacak Kütüphane/Araç:** `CuPy` (MIT License), `Numba` (BSD 2-Clause License).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici (implementasyon).\n            *   **Lisans Uyumluluğu:** CuPy ve Numba ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_5_architect_detailed_cuda_tasks.md_16",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md",
        "chunk_index": 16,
        "text": "*(Bu detaylandırma, Yazılım Mimarı personasının görevlerinin bir başlangıcıdır. Diğer Alt Görevler ve Makro/Mikro/Atlas görevleri benzer şekilde detaylandırılacaktır.)*"
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# Kıdemli Backend Geliştirici (Ahmet Çelik) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, Kıdemli Backend Geliştirici (Ahmet Çelik) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** Backend servislerinde CUDA ile hızlandırılabilecek hotspot'ların belirlenmesi, Proof-of-Concept (PoC) çalışmalarının yapılması ve CUDA tabanlı backend modüllerinin geliştirilmesi."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: Backend Servislerinde CUDA ile Hızlandırmaya Uygun Hotspot'ların Belirlenmesi"
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** `ai-orchestrator` ve `segmentation-service` başta olmak üzere, backend servislerindeki mevcut algoritmalardan ve veri işleme adımlarından CUDA ile hızlandırmaya en uygun (performans kazanımı en yüksek olacak) 2-3 adet adayın (hotspot) belirlenmesi."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: `ai-orchestrator` Servisinin Performans Profillemesi ve Hotspot Analizi\n    *   **Açıklama:** `ai-orchestrator` servisinin, özellikle model çıkarım ve veri işleme süreçlerinin detaylı performans profillemesinin yapılması ve CUDA ile hızlandırılabilecek darboğazların tespit edilmesi.\n    *   **Mikro Görev 1.1.1:** `ai-orchestrator` servisinin mevcut yük altında (tipik kullanım senaryoları) performans metriklerinin toplanması.\n        *   **Atlas Görevi AG-BE-PROF-AIORCH-001:**\n            *   **Açıklama:** Python `cProfile` veya `Py-Spy` kullanarak `ai-orchestrator` servisinin model çıkarım (`inference`) endpoint'lerinin ve ilgili iç fonksiyonlarının CPU kullanım süreleri ve çağrı sayılarının profillenmesi.\n            *   **İlgili Modül:** `ai-orchestrator/app.py` (ve ilgili servis/manager sınıfları), `ai-orchestrator/services/inference_service.py`.\n            *   **Kullanılacak Kütüphane/Araç:** `cProfile` (Python stdlib, PSF Lisansı - Uyumlu), `Py-Spy` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Test senaryoları (QA Mühendisi), tipik model ve veri yükleri (Veri Bilimcisi).\n            *   **Lisans Uyumluluğu:** Kullanılan araçlar ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 1.1.2:** Profilleme sonuçlarına göre `ai-orchestrator` içinde CUDA ile hızlandırmaya en uygun 1-2 aday fonksiyon/modülün belirlenmesi.\n        *   **Atlas Görevi AG-BE-HOTSPOT-AIORCH-001:**\n            *   **Açıklama:** Profilleme verilerini analiz ederek, en çok CPU zamanı harcayan ve paralelleştirilmeye uygun olan model çıkarım adımlarının (örn. ön işleme, post işleme, belirli katman hesaplamaları eğer model framework dışında ise) veya veri manipülasyon fonksiyonlarının listelenmesi.\n            *   **İlgili Modül/Belge:** Profilleme sonuç raporu, `ai-orchestrator` kaynak kodu.\n            *   **Kullanılacak Kütüphane/Araç:** Profilleme analiz araçları (örn. SnakeViz, Pprofui).\n            *   **Bağımlılıklar/İlişkiler:** Veri Bilimcisi (model mimarisi bilgisi).\n            *   **Lisans Uyumluluğu:** N/A (Analiz süreci)."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Makro Görev 1.2: `segmentation-service` Servisinin Performans Profillemesi ve Hotspot Analizi\n    *   **Açıklama:** `segmentation-service` servisinin, özellikle `parallel_processing_optimizer.py` gibi yoğun hesaplama yapan modüllerinin detaylı performans profillemesinin yapılması ve CUDA ile hızlandırılabilecek darboğazların tespit edilmesi.\n    *   **Mikro Görev 1.2.1:** `segmentation-service` servisinin `parallel_processing_optimizer.py` modülündeki ana algoritmaların performans metriklerinin toplanması.\n        *   **Atlas Görevi AG-BE-PROF-SEGSERV-001:**\n            *   **Açıklama:** `parallel_processing_optimizer.py` içindeki döngülerin, veri işleme fonksiyonlarının ve potansiyel paralel hesaplama bölümlerinin `cProfile` veya satır bazlı profiller (line_profiler) ile detaylı profillenmesi.\n            *   **İlgili Modül:** `segmentation-service/services/parallel_processing_optimizer.py`.\n            *   **Kullanılacak Kütüphane/Araç:** `cProfile` (Python stdlib, PSF Lisansı - Uyumlu), `line_profiler` (BSD Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Örnek büyük metin veri setleri (Veri Bilimcisi).\n            *   **Lisans Uyumluluğu:** Kullanılan araçlar ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 1.2.2:** Profilleme sonuçlarına göre `segmentation-service` içinde CUDA ile hızlandırmaya en uygun 1-2 aday fonksiyon/algoritmanın belirlenmesi.\n        *   **Atlas Görevi AG-BE-HOTSPOT-SEGSERV-001:**\n            *   **Açıklama:** `parallel_processing_optimizer.py` modülündeki en yoğun hesaplama yapan ve paralelleştirme potansiyeli yüksek olan algoritmik adımların (örn. metin benzerlik hesaplamaları, embedding matris operasyonları) listelenmesi.\n            *   **İlgili Modül/Belge:** Profilleme sonuç raporu, `segmentation-service` kaynak kodu.\n            *   **Kullanılacak Kütüphane/Araç:** Profilleme analiz araçları.\n            *   **Bağımlılıklar/İlişkiler:** Veri Bilimcisi (algoritma detayları).\n            *   **Lisans Uyumluluğu:** N/A (Analiz süreci)."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "## Alt Görev 2: Seçilen Bir Hotspot için Proof-of-Concept (PoC) Planı Hazırlanması ve Uygulanması"
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "*   **Açıklama:** Belirlenen hotspot adaylarından biri için (örneğin, `segmentation-service` içerisindeki `parallel_processing_optimizer.py` modülündeki bir algoritma) bir Ön Çalışma (Proof-of-Concept - PoC) planı hazırlamak ve bu PoC'yi uygulamak."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "### Makro Görev 2.1: PoC için Algoritma Seçimi ve Detaylı PoC Planının Oluşturulması\n    *   **Açıklama:** Hotspot analizleri sonucunda belirlenen adaylar arasından PoC için en uygun olan bir algoritmanın seçilmesi ve bu algoritmanın CUDA ile implementasyonu için detaylı bir plan hazırlanması.\n    *   **Mikro Görev 2.1.1:** PoC için hedef algoritmanın ve kapsamının netleştirilmesi.\n        *   **Atlas Görevi AG-BE-POCDEF-001:**\n            *   **Açıklama:** `segmentation-service/services/parallel_processing_optimizer.py` içinden, örneğin, büyük bir metin koleksiyonu üzerinde tüm-çiftlere-karşı (all-pairs) kosinüs benzerliği hesaplama algoritmasının PoC hedefi olarak seçilmesi.\n            *   **İlgili Modül/Belge:** Hotspot analiz raporu, `parallel_processing_optimizer.py` kaynak kodu.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Karar verme ve tanımlama).\n            *   **Bağımlılıklar/İlişkiler:** Veri Bilimcisi (algoritmanın önemi ve karmaşıklığı hakkında girdi).\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 2.1.2:** Seçilen algoritma için CUDA implementasyon stratejisinin (Python CuPy/Numba veya C++ CUDA) belirlenmesi ve PoC planının yazılması.\n        *   **Atlas Görevi AG-BE-POCPLAN-001:**\n            *   **Açıklama:** Kosinüs benzerliği hesaplaması için CuPy kullanarak bir Python tabanlı CUDA implementasyonu PoC planının hazırlanması. Plan, kullanılacak CuPy fonksiyonlarını, veri transfer stratejilerini (CPU-GPU), beklenen performans metriklerini ve basit bir test senaryosunu içermelidir.\n            *   **İlgili Modül/Belge:** PoC Hedef Algoritma Tanımı, `CuPy` dokümantasyonu.\n            *   **Kullanılacak Kütüphane/Araç:** `CuPy` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Yazılım Mimarı (mimari uyum), QA Mühendisi (test senaryosu girdisi).\n            *   **Lisans Uyumluluğu:** CuPy ticari ve kapalı kaynak dağıtıma uygun.\n        *   **(Opsiyonel) Atlas Görevi AG-BE-POCPLAN-002 (Öneri S2.1 ile ilişkili):**\n            *   **Açıklama:** Aynı kosinüs benzerliği hesaplaması için C++ ile özel bir CUDA çekirdeği yazma opsiyonunu da içeren (veya ayrı bir PoC olarak planlanan) bir karşılaştırmalı PoC planının hazırlanması.\n            *   **İlgili Modül/Belge:** PoC Hedef Algoritma Tanımı, CUDA C++ Programlama Kılavuzu.\n            *   **Kullanılacak Kütüphane/Araç:** NVIDIA CUDA Toolkit (NVIDIA EULA - Uyumlu), C++ Derleyicisi (GCC/Clang/MSVC - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Yazılım Mimarı, QA Mühendisi.\n            *   **Lisans Uyumluluğu:** CUDA Toolkit ve derleyiciler ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "### Makro Görev 2.2: Seçilen Algoritmanın CUDA ile PoC Implementasyonu (CuPy Örneği)\n    *   **Açıklama:** AG-BE-POCPLAN-001'de tanımlanan plana göre kosinüs benzerliği algoritmasının CuPy kullanılarak implemente edilmesi.\n    *   **Mikro Görev 2.2.1:** Gerekli veri yapılarının (örn. metin embeddingleri) CPU'dan GPU'ya (CuPy array'lerine) transferi için fonksiyonların yazılması.\n        *   **Atlas Görevi AG-BE-POCIMPL-DATA-001:**\n            *   **Açıklama:** NumPy array'lerini CuPy array'lerine (`cp.asarray()`) dönüştüren ve GPU belleğine transfer eden bir Python fonksiyonunun `segmentation-service/utils/gpu_utils.py` (yeni oluşturulabilir) modülüne eklenmesi.\n            *   **İlgili Modül:** `segmentation-service/utils/gpu_utils.py`.\n            *   **Kullanılacak Kütüphane/Araç:** `CuPy` (MIT Lisansı - Uyumlu), `NumPy` (BSD Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Örnek embedding verisi.\n            *   **Lisans Uyumluluğu:** CuPy ve NumPy ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 2.2.2:** Kosinüs benzerliği hesaplamasının CuPy fonksiyonları (örn. `cupy.dot`, `cupy.linalg.norm`) kullanılarak GPU üzerinde yapılması.\n        *   **Atlas Görevi AG-BE-POCIMPL-CALC-001:**\n            *   **Açıklama:** `parallel_processing_optimizer.py` modülüne, embedding matrislerini alıp CuPy kullanarak kosinüs benzerlik matrisini hesaplayan bir fonksiyon (`calculate_similarity_gpu_cupy`) eklenmesi.\n            *   **İlgili Modül:** `segmentation-service/services/parallel_processing_optimizer.py`.\n            *   **Kullanılacak Kütüphane/Araç:** `CuPy` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** AG-BE-POCIMPL-DATA-001'den GPU'ya transfer edilmiş veriler.\n            *   **Lisans Uyumluluğu:** CuPy ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 2.2.3:** Sonuçların GPU'dan CPU'ya geri transferi ve mevcut CPU tabanlı implementasyonla sonuçların karşılaştırılması (doğruluk testi).\n        *   **Atlas Görevi AG-BE-POCIMPL-VALIDATE-001:**\n            *   **Açıklama:** GPU'da hesaplanan benzerlik matrisinin CPU'ya (`cupy.asnumpy()`) geri transfer edilmesi ve NumPy tabanlı orijinal fonksiyonun sonuçlarıyla karşılaştırılarak doğruluğunun (küçük toleranslarla) teyit edilmesi.\n            *   **İlgili Modül:** PoC test scripti.\n            *   **Kullanılacak Kütüphane/Araç:** `CuPy` (MIT Lisansı - Uyumlu), `NumPy` (BSD Lisansı - Uyumlu), `pytest` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Orijinal CPU implementasyonu.\n            *   **Lisans Uyumluluğu:** Kullanılan kütüphaneler ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "### Makro Görev 2.3: PoC Performansının Değerlendirilmesi ve Raporlanması\n    *   **Açıklama:** Uygulanan CUDA PoC'sinin performansının CPU tabanlı orijinal implementasyonla karşılaştırılması ve sonuçların raporlanması.\n    *   **Mikro Görev 2.3.1:** CPU ve GPU implementasyonlarının farklı veri boyutları için çalışma sürelerinin ölçülmesi.\n        *   **Atlas Görevi AG-BE-POCPERF-001:**\n            *   **Açıklama:** Farklı sayılarda metin (ve dolayısıyla embedding) içeren veri setleri (örn. 100, 1000, 10000, 100000 metin) için hem CPU hem de GPU (`calculate_similarity_gpu_cupy`) fonksiyonlarının çalışma sürelerinin `timeit` modülü veya benzeri bir yöntemle ölçülüp kaydedilmesi.\n            *   **İlgili Modül:** PoC test/benchmark scripti.\n            *   **Kullanılacak Kütüphane/Araç:** `timeit` (Python stdlib, PSF Lisansı - Uyumlu), `CuPy`, `NumPy`.\n            *   **Bağımlılıklar/İlişkiler:** Çeşitli boyutlarda test verisi.\n            *   **Lisans Uyumluluğu:** Kullanılan kütüphaneler ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 2.3.2:** PoC sonuçlarının (performans kazanımları, karşılaşılan zorluklar, öneriler) bir rapor halinde özetlenmesi.\n        *   **Atlas Görevi AG-BE-POCREPORT-001:**\n            *   **Açıklama:** PoC çalışmasının tüm adımlarını, elde edilen performans karşılaştırma grafiklerini, kod örneklerini, karşılaşılan sorunları ve bu PoC'nin tam entegrasyona geçip geçmemesi yönündeki öneriyi içeren bir Markdown raporunun hazırlanması.\n            *   **İlgili Modül/Belge:** PoC Raporu (`poc_cosine_similarity_cupy_report.md`).\n            *   **Kullanılacak Kütüphane/Araç:** Markdown editörü.\n            *   **Bağımlılıklar/İlişkiler:** Tüm PoC çıktıları.\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_6_backend_developer_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "*(Bu detaylandırma, Kıdemli Backend Geliştirici personasının görevlerinin bir başlangıcıdır. Diğer hotspot adayları ve tam entegrasyon adımları için benzer şekilde detaylı görev kırılımları oluşturulacaktır.)*"
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# DevOps Mühendisi (Can Tekin) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, DevOps Mühendisi (Can Tekin) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** CUDA destekli geliştirme ve dağıtım ortamlarının kurulması, CI/CD süreçlerinin CUDA uyumlu hale getirilmesi, GPU kaynaklarının izlenmesi ve yönetilmesi, dağıtım stratejilerinin oluşturulması."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: CUDA Uyumlu Geliştirme ve Test Ortamlarının Kurulumu ve Yönetimi"
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** Geliştiricilerin ve QA ekibinin CUDA tabanlı geliştirmeler yapabilmesi ve testlerini yürütebilmesi için gerekli NVIDIA sürücülerinin, CUDA Toolkit'in, cuDNN'in ve diğer bağımlılıkların kurulu olduğu standartlaştırılmış geliştirme ve test ortamlarının (Docker imajları veya VM şablonları) hazırlanması ve bakımı."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: Standart CUDA Geliştirme Docker İmajının Oluşturulması\n    *   **Açıklama:** Projede kullanılacak spesifik CUDA Toolkit, cuDNN, Python ve temel AI kütüphanelerini içeren bir Docker imajının oluşturulması ve sürüm kontrolü altında tutulması.\n    *   **Mikro Görev 1.1.1:** Temel NVIDIA CUDA imajının (örn. `nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04`) seçilmesi ve projenin Python versiyonunun kurulması.\n        *   **Atlas Görevi AG-DEVOPS-DOCKERIMG-001:**\n            *   **Açıklama:** Dockerfile oluşturarak `FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04` direktifi ile başlanması, `apt-get update` ve `apt-get install -y python3.11 python3.11-pip python3.11-venv` komutları ile Python kurulumunun yapılması.\n            *   **İlgili Modül/Belge:** `Dockerfile.dev`, Proje Bağımlılıkları Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** Docker (Apache 2.0), NVIDIA CUDA Base Image (NVIDIA EULA).\n            *   **Bağımlılıklar/İlişkiler:** Proje için belirlenen CUDA ve Python versiyonları.\n            *   **Lisans Uyumluluğu:** Docker ve NVIDIA base image (kullanım koşulları dahilinde) uyumlu.\n    *   **Mikro Görev 1.1.2:** Proje bağımlılıklarının (TensorFlow, PyTorch, CuPy, Numba, RAPIDS vb.) Docker imajına eklenmesi.\n        *   **Atlas Görevi AG-DEVOPS-DOCKERIMG-002:**\n            *   **Açıklama:** `requirements.txt` dosyasındaki (veya CUDA'ya özel `requirements-gpu.txt`) kütüphanelerin `pip3.11 install -r requirements-gpu.txt` komutu ile Docker imajına kurulması. Gerekirse TensorRT gibi SDK'ların manuel kurulum adımlarının eklenmesi.\n            *   **İlgili Modül/Belge:** `Dockerfile.dev`, `requirements-gpu.txt`.\n            *   **Kullanılacak Kütüphane/Araç:** `pip` (MIT), Kurulacak Python kütüphaneleri (Apache 2.0, MIT, BSD vb. - lisansları önceden incelenmiş ve uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Veri Bilimcisi ve Backend Geliştirici (kütüphane listesi ve versiyonları).\n            *   **Lisans Uyumluluğu:** Kullanılan Python kütüphaneleri ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 1.1.3:** Docker imajının bir container registry'ye (örn. Docker Hub, AWS ECR, GitHub Packages) push edilmesi ve versiyonlanması.\n        *   **Atlas Görevi AG-DEVOPS-DOCKERIMG-003:**\n            *   **Açıklama:** `docker build`, `docker tag` ve `docker push` komutları kullanılarak oluşturulan imajın, seçilen container registry'ye yüklenmesi. İmaj etiketlerinin (tag) versiyonlama stratejisine (örn. `altlas-dev:cuda-11.8-py3.11-v1.0`) uygun olması.\n            *   **İlgili Modül/Belge:** `Dockerfile.dev`, CI/CD pipeline scriptleri.\n            *   **Kullanılacak Kütüphane/Araç:** Docker, Seçilen Container Registry.\n            *   **Bağımlılıklar/İlişkiler:** CI/CD sistemi.\n            *   **Lisans Uyumluluğu:** N/A (Araçlar için)."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Makro Görev 1.2: CUDA Uyumlu Test Ortamlarının Hazırlanması\n    *   **Açıklama:** QA ekibinin CUDA tabanlı testleri çalıştırabilmesi için, geliştirme imajına benzer ancak test araçlarını da içeren bir test ortamı Docker imajının veya VM şablonunun oluşturulması.\n    *   **Mikro Görev 1.2.1:** Test ortamı için gerekli ek araçların (örn. PyTest, NVIDIA test araçları, benchmark scriptleri için bağımlılıklar) belirlenmesi ve Docker imajına eklenmesi.\n        *   **Atlas Görevi AG-DEVOPS-DOCKERTEST-001:**\n            *   **Açıklama:** Geliştirme Dockerfile (`Dockerfile.dev`) temel alınarak, QA Mühendisi ile koordineli bir şekilde `pytest`, `nvidia-smi` (zaten base imajda olmalı), ve diğer test bağımlılıklarının eklendiği bir `Dockerfile.test` oluşturulması.\n            *   **İlgili Modül/Belge:** `Dockerfile.test`, QA Test Planı.\n            *   **Kullanılacak Kütüphane/Araç:** Docker, `pytest` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** QA Mühendisi (test aracı gereksinimleri).\n            *   **Lisans Uyumluluğu:** `pytest` ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "## Alt Görev 2: CUDA Destekli Servisler için CI/CD Pipeline'larının Geliştirilmesi ve Güncellenmesi"
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "*   **Açıklama:** CUDA ile geliştirilen kodun otomatik olarak derlenmesi, test edilmesi ve dağıtılabilir paketler haline getirilmesi için mevcut CI/CD pipeline'larının (örn. Jenkins, GitLab CI, GitHub Actions) güncellenmesi veya yenilerinin oluşturulması."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "### Makro Görev 2.1: CI Pipeline'ında CUDA Kod Derleme ve Birim Testlerinin Entegrasyonu\n    *   **Açıklama:** Her kod push işleminden sonra CUDA içeren modüllerin derlenmesi (eğer C++/CUDA çekirdekleri varsa) ve Python tabanlı CUDA kodları için birim testlerinin GPU destekli runner'lar üzerinde çalıştırılması.\n    *   **Mikro Görev 2.1.1:** CI sisteminde GPU destekli bir runner/agent konfigürasyonunun yapılması.\n        *   **Atlas Görevi AG-DEVOPS-CICD-GPURUNNER-001:**\n            *   **Açıklama:** Seçilen CI/CD platformunda (örn. GitLab CI runner, GitHub Actions self-hosted runner) NVIDIA GPU'larına erişimi olan bir runner'ın kurulması ve yapılandırılması. Bu runner, Makro Görev 1.1'de oluşturulan CUDA geliştirme Docker imajını kullanabilmelidir.\n            *   **İlgili Modül/Belge:** CI/CD Platform Dokümantasyonu, `Dockerfile.dev`.\n            *   **Kullanılacak Kütüphane/Araç:** CI/CD Platformu, Docker, NVIDIA Container Toolkit.\n            *   **Bağımlılıklar/İlişkiler:** Proje altyapısı (GPU'lu sunucu).\n            *   **Lisans Uyumluluğu:** N/A (Altyapı ve platforma bağlı).\n    *   **Mikro Görev 2.1.2:** CUDA birim testlerinin (örn. `pytest` ile yazılmış ve CuPy/Numba kullanan testler) CI pipeline'ına eklenmesi.\n        *   **Atlas Görevi AG-DEVOPS-CICD-UNITTEST-001:**\n            *   **Açıklama:** CI pipeline script'ine (örn. `.gitlab-ci.yml`, GitHub Actions workflow dosyası) `pytest tests/gpu/` gibi bir komut eklenerek GPU gerektiren birim testlerinin GPU'lu runner üzerinde çalıştırılmasının sağlanması.\n            *   **İlgili Modül/Belge:** CI/CD pipeline scripti, Proje test yapısı.\n            *   **Kullanılacak Kütüphane/Araç:** `pytest` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** GPU'lu runner, QA Mühendisi (test scriptleri).\n            *   **Lisans Uyumluluğu:** `pytest` uyumlu."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "### Makro Görev 2.2: CUDA Uyumlu Dağıtım Paketlerinin (Docker İmajları) CD Pipeline'ında Oluşturulması\n    *   **Açıklama:** Başarılı CI süreçlerinden sonra, CUDA runtime kütüphanelerini ve optimize edilmiş modelleri içeren, üretime hazır Docker imajlarının otomatik olarak oluşturulması ve container registry'ye push edilmesi.\n    *   **Mikro Görev 2.2.1:** Üretim için optimize edilmiş bir CUDA runtime Dockerfile (`Dockerfile.prod`) oluşturulması.\n        *   **Atlas Görevi AG-DEVOPS-DOCKERPROD-001:**\n            *   **Açıklama:** `Dockerfile.prod` oluşturularak, `nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04` gibi daha küçük bir base runtime imajının kullanılması. Sadece gerekli CUDA runtime kütüphanelerinin, Python uygulamasının ve TensorRT motorları gibi optimize edilmiş model dosyalarının imaja kopyalanması. Geliştirme araçları ve gereksiz bağımlılıklar çıkarılmalıdır.\n            *   **İlgili Modül/Belge:** `Dockerfile.prod`, `Dockerfile.dev` (referans için).\n            *   **Kullanılacak Kütüphane/Araç:** Docker, NVIDIA CUDA Runtime Image (NVIDIA EULA).\n            *   **Bağımlılıklar/İlişkiler:** Optimize edilmiş model dosyaları (Veri Bilimcisi).\n            *   **Lisans Uyumluluğu:** NVIDIA runtime image (kullanım koşulları dahilinde) uyumlu.\n    *   **Mikro Görev 2.2.2:** CD pipeline'ında üretim Docker imajının build edilmesi ve registry'ye push edilmesinin otomatize edilmesi.\n        *   **Atlas Görevi AG-DEVOPS-CD-BUILDPUSH-001:**\n            *   **Açıklama:** CI pipeline'ının başarılı test aşamasından sonra tetiklenecek bir CD adımı eklenerek, `Dockerfile.prod` kullanılarak üretim imajının build edilmesi, versiyonlanması ve container registry'ye push edilmesinin sağlanması.\n            *   **İlgili Modül/Belge:** CI/CD pipeline scripti, `Dockerfile.prod`.\n            *   **Kullanılacak Kütüphane/Araç:** Docker, CI/CD Platformu.\n            *   **Bağımlılıklar/İlişkiler:** Container Registry.\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "## Alt Görev 3: GPU Kaynaklarının İzlenmesi ve Kubernetes Entegrasyonu (Öneri S3.1, S3.2 ile ilişkili)"
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "*   **Açıklama:** Kubernetes üzerinde çalışacak CUDA uygulamaları için GPU kaynaklarının etkin bir şekilde izlenmesi, tahsis edilmesi ve yönetilmesi. NVIDIA Nsight gibi araçlarla detaylı çekirdek izleme altyapısının kurulması."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_13",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 13,
        "text": "### Makro Görev 3.1: Kubernetes için NVIDIA Device Plugin Kurulumu ve Konfigürasyonu\n    *   **Açıklama:** Kubernetes cluster'ında GPU kaynaklarının pod'lara atanabilmesi için NVIDIA Device Plugin for Kubernetes'in kurulması ve yapılandırılması.\n    *   **Mikro Görev 3.1.1:** NVIDIA Device Plugin'in Kubernetes cluster'ına deploy edilmesi.\n        *   **Atlas Görevi AG-DEVOPS-K8S-DEVICEPLUGIN-001:**\n            *   **Açıklama:** NVIDIA'nın resmi dokümantasyonunu takip ederek `nvidia-device-plugin` DaemonSet'inin Kubernetes cluster'ına `kubectl apply -f <nvidia-device-plugin.yml>` komutu ile deploy edilmesi.\n            *   **İlgili Modül/Belge:** Kubernetes Cluster Yönetim Arayüzü/CLI, NVIDIA Device Plugin Dokümantasyonu.\n            *   **Kullanılacak Kütüphane/Araç:** `kubectl` (Apache 2.0), NVIDIA Device Plugin (Apache 2.0).\n            *   **Bağımlılıklar/İlişkiler:** Çalışan bir Kubernetes cluster, worker node'larda NVIDIA sürücülerinin kurulu olması.\n            *   **Lisans Uyumluluğu:** `kubectl` ve NVIDIA Device Plugin ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_14",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 14,
        "text": "### Makro Görev 3.2: GPU İzleme için Prometheus ve Grafana Entegrasyonu (DCGM ile)\n    *   **Açıklama:** NVIDIA Data Center GPU Manager (DCGM) kullanarak GPU metriklerinin (kullanım, sıcaklık, bellek) toplanması ve bu metriklerin Prometheus'a aktarılarak Grafana'da görselleştirilmesi.\n    *   **Mikro Görev 3.2.1:** DCGM exporter'ın kurularak Prometheus'un GPU metriklerini scrape etmesinin sağlanması.\n        *   **Atlas Görevi AG-DEVOPS-MONITOR-DCGMEXPORTER-001:**\n            *   **Açıklama:** `dcgm-exporter` servisinin GPU'lu node'larda çalışacak şekilde deploy edilmesi ve Prometheus konfigürasyonuna (`prometheus.yml`) bu exporter'ı scrape edecek bir job eklenmesi.\n            *   **İlgili Modül/Belge:** Prometheus Konfigürasyonu, DCGM Exporter Dokümantasyonu.\n            *   **Kullanılacak Kütüphane/Araç:** `dcgm-exporter` (Apache 2.0), Prometheus (Apache 2.0).\n            *   **Bağımlılıklar/İlişkiler:** Çalışan Prometheus ve DCGM.\n            *   **Lisans Uyumluluğu:** `dcgm-exporter` ve Prometheus ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 3.2.2:** Grafana'da temel GPU izleme dashboard'unun oluşturulması.\n        *   **Atlas Görevi AG-DEVOPS-MONITOR-GRAFANADASH-001:**\n            *   **Açıklama:** Grafana'da yeni bir dashboard oluşturularak, Prometheus'tan gelen DCGM metriklerini (GPU kullanımı, bellek kullanımı, sıcaklık vb.) gösteren panellerin eklenmesi. **Not: Grafana OSS (AGPLv3) lisansı ticari kapalı kaynak dağıtımda sorunlu olabilir. Bu dashboard'un şirket içi kullanım veya kullanıcıya kendi Grafana'sında kurması için şablon olarak sunulması değerlendirilmelidir. Alternatif olarak, Apache ECharts gibi bir kütüphane ile özel bir dashboard arayüzü geliştirilebilir veya Grafana Enterprise lisansı alınabilir.**\n            *   **İlgili Modül/Belge:** Grafana, Prometheus Veri Kaynağı.\n            *   **Kullanılacak Kütüphane/Araç:** Grafana (AGPLv3 veya Enterprise), Prometheus (Apache 2.0).\n            *   **Bağımlılıklar/İlişkiler:** AG-DEVOPS-MONITOR-DCGMEXPORTER-001.\n            *   **Lisans Uyumluluğu:** Grafana OSS (AGPLv3) ticari kapalı kaynak dağıtım için **uyumsuz**. Alternatifler değerlendirilmeli."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_15",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 15,
        "text": "### Makro Görev 3.3: NVIDIA Nsight ile Detaylı Çekirdek İzleme Altyapısının Kurulumu (Öneri S3.2)\n    *   **Açıklama:** Geliştirme ve test ortamlarında, CUDA çekirdeklerinin detaylı performans analizi için NVIDIA Nsight Systems/Compute araçlarının kullanımına yönelik altyapının ve süreçlerin oluşturulması.\n    *   **Mikro Görev 3.3.1:** Nsight Systems ve Nsight Compute araçlarının geliştirme/test ortamlarına (veya ilgili Docker imajlarına) kurulumu veya erişilebilirliğinin sağlanması.\n        *   **Atlas Görevi AG-DEVOPS-NSIGHT-SETUP-001:**\n            *   **Açıklama:** Nsight Systems ve Nsight Compute'un CUDA geliştirme Docker imajına (`Dockerfile.dev`) veya geliştiricilerin erişebileceği merkezi bir sunucuya kurulması. Komut satırı versiyonlarının (`nsys`, `ncu`) path'e eklenmesi.\n            *   **İlgili Modül/Belge:** NVIDIA Nsight Dokümantasyonu, `Dockerfile.dev`.\n            *   **Kullanılacak Kütüphane/Araç:** NVIDIA Nsight Suite (NVIDIA EULA - Geliştirme aracı olarak uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** CUDA Toolkit.\n            *   **Lisans Uyumluluğu:** Nsight geliştirme araçları olarak ticari projelerde kullanıma uygun."
    },
    {
        "doc_id": "doc_7_devops_engineer_detailed_cuda_tasks.md_16",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md",
        "chunk_index": 16,
        "text": "*(Bu detaylandırma, DevOps Mühendisi personasının görevlerinin bir başlangıcıdır. Diğer Alt Görevler ve Makro/Mikro/Atlas görevleri benzer şekilde detaylandırılacaktır.)*"
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# Kıdemli Frontend Geliştirici (Zeynep Aydın) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, Kıdemli Frontend Geliştirici (Zeynep Aydın) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** CUDA entegrasyonunun kullanıcı arayüzüne (UI) etkilerinin değerlendirilmesi, performans kazanımlarının kullanıcı deneyimine (UX) yansıtılması, WebGPU gibi istemci taraflı GPU hızlandırma teknolojilerinin fizibilitesinin araştırılması ve UI'da CUDA ile ilgili bilgilendirmelerin yapılması."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: CUDA Entegrasyonunun Mevcut Frontend Performansına ve Kullanıcı Deneyimine Etkilerinin Analizi"
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** Backend servislerinde yapılacak CUDA hızlandırmalarının, frontend tarafında nasıl bir performans artışı (örn. daha hızlı yanıt süreleri, daha akıcı veri görselleştirmeleri) sağlayacağının ve bunun kullanıcı deneyimini nasıl iyileştireceğinin analiz edilmesi."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: Backend Yanıt Sürelerindeki İyileşmelerin Frontend'e Yansımasının Değerlendirilmesi\n    *   **Açıklama:** `ai-orchestrator` ve `segmentation-service` gibi servislerden gelen yanıt sürelerindeki potansiyel düşüşlerin, frontend'deki ilgili bileşenlerin yüklenme ve etkileşim hızlarına nasıl yansıyacağının teorik ve pratik olarak değerlendirilmesi.\n    *   **Mikro Görev 1.1.1:** Mevcut durumda, GPU hızlandırması olmayan backend servisleriyle etkileşimde bulunan kritik frontend bileşenlerinin (örn. analiz sonuçları tablosu, büyük veri listeleri, model çıkarım sonuçlarını gösteren arayüzler) performansının ölçülmesi (baseline).\n        *   **Atlas Görevi AG-FE-PERFANALYSIS-001:**\n            *   **Açıklama:** Tarayıcı geliştirici araçları (Network tab, Performance tab) kullanılarak, belirli kullanıcı senaryolarında (örn. büyük bir analiz isteği gönderme ve sonuçları görüntüleme) backend API çağrılarının yanıt sürelerinin ve bu yanıtlara bağlı UI güncellemelerinin ne kadar sürdüğünün kaydedilmesi.\n            *   **İlgili Modül/Belge:** Frontend uygulama kaynak kodu (ilgili React/Vue/Angular bileşenleri), API sözleşmeleri.\n            *   **Kullanılacak Kütüphane/Araç:** Tarayıcı Geliştirici Araçları (Chrome DevTools, Firefox Developer Tools).\n            *   **Bağımlılıklar/İlişkiler:** Mevcut backend servislerinin durumu, QA Mühendisi (test senaryoları).\n            *   **Lisans Uyumluluğu:** N/A (Araçlar için).\n    *   **Mikro Görev 1.1.2:** Backend ekibinden (Kıdemli Backend Geliştirici, Veri Bilimcisi) CUDA ile beklenen performans kazanımları hakkında bilgi alınması ve bu kazanımların frontend'e olası etkilerinin (örn. %X daha hızlı yükleme) tahmin edilmesi.\n        *   **Atlas Görevi AG-FE-PERFESTIMATE-001:**\n            *   **Açıklama:** Backend ekibi tarafından yapılan PoC ve analiz sonuçlarına (örn. `poc_cosine_similarity_cupy_report.md`) dayanarak, API yanıt sürelerindeki beklenen iyileşme oranlarının (örn. ortalama ve 99. persentil) not edilmesi ve bu iyileşmelerin frontend tarafındaki kullanıcıya yansıyan gecikmeleri ne kadar azaltacağının hesaplanması.\n            *   **İlgili Modül/Belge:** Backend PoC raporları, API sözleşmeleri.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Analiz ve hesaplama).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici, Veri Bilimcisi.\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "## Alt Görev 2: CUDA Performans Kazanımlarını Kullanıcı Arayüzünde Vurgulama Stratejilerinin Geliştirilmesi (Öneri S4.2 ile ilişkili)"
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "*   **Açıklama:** Backend'de CUDA ile elde edilen performans artışının kullanıcıya fark ettirilmesi ve kullanıcı deneyimini olumlu yönde pekiştirmesi için arayüzde görsel göstergeler veya bilgilendirmeler kullanılması."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "### Makro Görev 2.1: \"Hızlandırılmış Sonuç\" veya Benzeri Bir Görsel Gösterge Tasarımı ve Prototiplemesi\n    *   **Açıklama:** CUDA ile işlenmiş ve hızlı gelen sonuçlar için UI'da kullanıcıya bu durumu belirten (örn. bir ikon, bir etiket, bir animasyon) ince ve bilgilendirici bir görsel gösterge tasarlanması ve prototipinin oluşturulması.\n    *   **Mikro Görev 2.1.1:** Farklı görsel gösterge konseptlerinin (örn. \"CUDA Hızlandırıldı\", \"Anında Sonuç\", küçük bir roket ikonu vb.) UI/UX Tasarımcısı ile birlikte beyin fırtınası yapılarak belirlenmesi.\n        *   **Atlas Görevi AG-FE-INDICATOR-CONCEPT-001:**\n            *   **Açıklama:** UI/UX Tasarımcısı ile bir çalıştay düzenlenerek, kullanıcıyı yormayacak, bilgilendirici ve markayla uyumlu potansiyel görsel gösterge fikirlerinin üretilmesi ve eskizlerinin çizilmesi.\n            *   **İlgili Modül/Belge:** UI/UX Tasarım Kılavuzu, Proje Marka Kimliği.\n            *   **Kullanılacak Kütüphane/Araç:** Beyaz tahta, eskiz araçları, Figma/Sketch (tasarım araçları).\n            *   **Bağımlılıklar/İlişkiler:** UI/UX Tasarımcısı.\n            *   **Lisans Uyumluluğu:** Tasarım araçlarının lisansları (genellikle ticari veya abonelik bazlı).\n    *   **Mikro Görev 2.1.2:** Seçilen bir veya iki gösterge konsepti için frontend'de (örn. React/Vue/Angular bileşeni olarak) basit bir prototip geliştirilmesi.\n        *   **Atlas Görevi AG-FE-INDICATOR-PROTOTYPE-001:**\n            *   **Açıklama:** Belirlenen bir gösterge (örn. API yanıtında özel bir header veya alan ile tetiklenecek bir \"Hızlı İşlem\" ikonu) için bir React bileşeni oluşturulması. Bu bileşen, API yanıtına göre dinamik olarak görünüp kaybolmalıdır.\n            *   **İlgili Modül:** Frontend uygulaması içinde yeni bir UI bileşeni (örn. `components/PerformanceIndicator.jsx`).\n            *   **Kullanılacak Kütüphane/Araç:** `React` (MIT Lisansı - Uyumlu), CSS/Styled Components.\n            *   **Bağımlılıklar/İlişkiler:** API yanıt yapısı (Backend Geliştirici, Yazılım Mimarı), UI/UX Tasarımcısı (görsel tasarım).\n            *   **Lisans Uyumluluğu:** React ve ilişkili yaygın kütüphaneler ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "## Alt Görev 3: WebGPU ile İstemci Taraflı GPU Hızlandırma Fizibilitesinin Araştırılması (Öneri S4.1 ile ilişkili)"
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "*   **Açıklama:** Belirli frontend görevleri (örn. karmaşık veri görselleştirmeleri, bazı istemci taraflı ön/son işlemeler) için WebGPU standardının kullanılarak istemci tarafında GPU hızlandırması yapılmasının fizibilitesinin araştırılması ve bir PoC yapılması."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "### Makro Görev 3.1: WebGPU için Potansiyel Kullanım Alanlarının Belirlenmesi\n    *   **Açıklama:** Mevcut frontend uygulamasında WebGPU ile hızlandırılabilecek, hesaplama yoğun veya büyük veri setleriyle çalışan bileşenlerin (örn. 3D grafikler, büyük veri tablolarının anlık filtrelenmesi/render edilmesi, istemci taraflı ML çıkarımları) belirlenmesi.\n    *   **Mikro Görev 3.1.1:** Projedeki mevcut veri görselleştirme bileşenlerinin (örn. karmaşık grafikler, haritalar) WebGPU ile potansiyel olarak nasıl iyileştirilebileceğinin analizi.\n        *   **Atlas Görevi AG-FE-WEBGPU-USECASE-VIS-001:**\n            *   **Açıklama:** Mevcut bir D3.js veya benzeri bir kütüphane ile yapılmış karmaşık bir veri görselleştirme bileşeninin performans darboğazlarının incelenmesi ve WebGPU ile bu darboğazların (örn. binlerce DOM elemanı yerine tek bir canvas üzerinde GPU ile render) nasıl aşılabileceğinin teorik olarak değerlendirilmesi.\n            *   **İlgili Modül/Belge:** İlgili frontend görselleştirme bileşeninin kaynak kodu.\n            *   **Kullanılacak Kütüphane/Araç:** Tarayıcı Performans Profiler.\n            *   **Bağımlılıklar/İlişkiler:** UI/UX Tasarımcısı (görselleştirme gereksinimleri).\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "### Makro Görev 3.2: Seçilen Bir Kullanım Alanı için WebGPU ile PoC Geliştirilmesi\n    *   **Açıklama:** Belirlenen bir kullanım alanı için (örn. basit bir 2D/3D veri görselleştirmesi veya bir matris çarpımı gibi hesaplama görevi) WebGPU kullanarak bir PoC prototipi geliştirilmesi.\n    *   **Mikro Görev 3.2.1:** WebGPU temellerinin (Device, Adapter, Shader, Pipeline, Buffer, Command Encoder) öğrenilmesi ve basit bir WebGPU \"Merhaba Dünya\" (örn. ekrana bir üçgen çizme) uygulamasının yapılması.\n        *   **Atlas Görevi AG-FE-WEBGPU-POC-HELLO-001:**\n            *   **Açıklama:** WebGPU API'sini kullanarak temel bir render pipeline oluşturulması, basit bir vertex ve fragment shader (WGSL dilinde) yazılması ve bir canvas üzerine renkli bir üçgen çizdirilmesi.\n            *   **İlgili Modül/Belge:** `webgpu-poc/hello_triangle.html` (yeni oluşturulacak PoC projesi).\n            *   **Kullanılacak Kütüphane/Araç:** Tarayıcı (WebGPU destekli - Chrome, Edge, Firefox Nightly), Text Editör.\n            *   **Bağımlılıklar/İlişkiler:** WebGPU API dokümantasyonu (örn. MDN, web.dev).\n            *   **Lisans Uyumluluğu:** N/A (Web standardı ve tarayıcı özelliği).\n    *   **Mikro Görev 3.2.2:** PoC hedefi olarak belirlenen basit bir hesaplama görevinin (örn. iki büyük matrisin çarpımı) WebGPU compute shader kullanarak implemente edilmesi.\n        *   **Atlas Görevi AG-FE-WEBGPU-POC-COMPUTE-001:**\n            *   **Açıklama:** İki matrisi girdi olarak alan, bunları GPU belleğine (buffer) yükleyen, WGSL ile yazılmış bir compute shader ile çarpan ve sonucu CPU'ya geri okuyan bir WebGPU uygulaması geliştirilmesi. JavaScript ile yapılan aynı hesaplamayla performansının karşılaştırılması.\n            *   **İlgili Modül/Belge:** `webgpu-poc/matrix_multiply.html`.\n            *   **Kullanılacak Kütüphane/Araç:** Tarayıcı, Text Editör.\n            *   **Bağımlılıklar/İlişkiler:** WebGPU API dokümantasyonu.\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 3.2.3:** WebGPU PoC sonuçlarının (geliştirme deneyimi, performans, tarayıcı uyumluluğu, zorluklar) raporlanması.\n        *   **Atlas Görevi AG-FE-WEBGPU-POC-REPORT-001:**\n            *   **Açıklama:** WebGPU PoC çalışmasının bulgularını, potansiyel faydalarını, karşılaşılan zorlukları (örn. API karmaşıklığı, debug imkanları) ve projenin geleceğinde WebGPU kullanımına dair önerileri içeren bir rapor hazırlanması.\n            *   **İlgili Modül/Belge:** `webgpu_poc_report.md`.\n            *   **Kullanılacak Kütüphane/Araç:** Markdown editörü.\n            *   **Bağımlılıklar/İlişkiler:** PoC kodları ve performans ölçümleri.\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_8_frontend_developer_detailed_cuda_tasks.md_13",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md",
        "chunk_index": 13,
        "text": "*(Bu detaylandırma, Kıdemli Frontend Geliştirici personasının görevlerinin bir başlangıcıdır. Diğer Alt Görevler ve Makro/Mikro/Atlas görevleri benzer şekilde detaylandırılacaktır.)*"
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# QA Mühendisi (Ayşe Kaya) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, QA Mühendisi (Ayşe Kaya) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** CUDA ile hızlandırılmış bileşenlerin ve tüm sistemin kalitesinin sağlanması, performans testlerinin tasarlanması ve yürütülmesi, CUDA uyumluluk testlerinin yapılması, hata takibi ve raporlaması."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: CUDA Entegrasyonu için Kapsamlı QA Stratejisi ve Test Planının Oluşturulması"
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** CUDA entegrasyonunun getireceği yeni test gereksinimlerini (fonksiyonel, performans, uyumluluk, regresyon) kapsayan detaylı bir QA stratejisi ve test planı oluşturulması."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: CUDA Odaklı Test Senaryolarının Tanımlanması\n    *   **Açıklama:** CUDA ile hızlandırılacak her bir fonksiyon/modül için spesifik test senaryolarının (pozitif, negatif, sınır durumları) ve beklenen sonuçların tanımlanması.\n    *   **Mikro Görev 1.1.1:** `segmentation-service` için CUDA ile hızlandırılacak kosinüs benzerliği hesaplama fonksiyonu (PoC hedefi) için test senaryolarının yazılması.\n        *   **Atlas Görevi AG-QA-TESTCASE-SEGCOSINE-001:**\n            *   **Açıklama:** Farklı boyutlarda girdi matrisleri (boş, tek elemanlı, çok büyük), NaN veya sonsuz içeren girdiler, CPU ve GPU sonuçlarının karşılaştırılması gibi durumları içeren test senaryolarının `pytest` formatında tasarlanması.\n            *   **İlgili Modül/Belge:** `segmentation-service/tests/gpu/test_cosine_similarity.py` (yeni oluşturulacak), Backend PoC Planı (`AG-BE-POCPLAN-001`).\n            *   **Kullanılacak Kütüphane/Araç:** `pytest` (MIT Lisansı - Uyumlu), `NumPy` (BSD Lisansı - Uyumlu), `CuPy` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Backend Geliştirici (fonksiyon arayüzü ve beklenen davranış).\n            *   **Lisans Uyumluluğu:** Kullanılan kütüphaneler ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 1.1.2:** `ai-orchestrator` servisinin TensorRT ile optimize edilmiş model çıkarım süreçleri için fonksiyonel test senaryolarının tanımlanması.\n        *   **Atlas Görevi AG-QA-TESTCASE-AIORCHTRT-001:**\n            *   **Açıklama:** Farklı modeller (TensorFlow, PyTorch, ONNX tabanlı TensorRT motorları) için geçerli/geçersiz girdilerle yapılan çıkarım isteklerinin API seviyesinde test edilmesi. Yanıtların doğruluğu (Veri Bilimcisi ile teyitli) ve API sözleşmesine uygunluğunun (örn. meta veri varlığı) kontrolü.\n            *   **İlgili Modül/Belge:** `ai-orchestrator/tests/api/test_inference_trt.py` (yeni oluşturulacak), API Sözleşmeleri, Veri Bilimcisi (model doğruluk kriterleri).\n            *   **Kullanılacak Kütüphane/Araç:** `pytest` (MIT Lisansı - Uyumlu), `requests` (Apache 2.0 - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** Yazılım Mimarı (API sözleşmesi), Veri Bilimcisi (beklenen model çıktıları).\n            *   **Lisans Uyumluluğu:** Kullanılan kütüphaneler ticari ve kapalı kaynak dağıtıma uygun."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Makro Görev 1.2: CUDA Performans Test Planının Oluşturulması (Öneri S5.2 ile ilişkili)\n    *   **Açıklama:** CUDA ile hızlandırılmış fonksiyonların ve servislerin performansını (gecikme, iş hacmi, kaynak kullanımı) ölçmek için detaylı bir performans test planı oluşturulması. Bu plan, 95. ve 99. persentil yanıt sürelerini de içermelidir.\n    *   **Mikro Görev 1.2.1:** Performans testi yapılacak kritik senaryoların ve metriklerin belirlenmesi.\n        *   **Atlas Görevi AG-QA-PERFPLAN-SCENARIOS-001:**\n            *   **Açıklama:** `ai-orchestrator` için eş zamanlı çıkarım istekleri, `segmentation-service` için büyük veri setleriyle segmentasyon gibi senaryoların tanımlanması. Ölçülecek metrikler: Ortalama, medyan, 95p, 99p yanıt süreleri, saniyedeki istek sayısı (RPS), GPU kullanımı (%), GPU bellek kullanımı (%).\n            *   **İlgili Modül/Belge:** Performans Test Planı Dokümanı, Yazılım Mimarı (kritik akışlar).\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Planlama ve tanımlama).\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (izleme altyapısı), Kıdemli Backend Geliştirici.\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 1.2.2:** Performans testleri için kullanılacak araçların (örn. Locust, k6, JMeter) ve test ortamı gereksinimlerinin belirlenmesi.\n        *   **Atlas Görevi AG-QA-PERFPLAN-TOOLS-001:**\n            *   **Açıklama:** API tabanlı servisler için `Locust` (MIT Lisansı - Uyumlu) veya `k6` (AGPLv3/Ticari - **AGPLv3 kısmı kapalı kaynak dağıtımda sorunlu, eğer k6 OSS dağıtılacaksa. Sadece test scriptleri yazılıp çalıştırılacaksa ve k6 kendisi dağıtılmıyorsa genellikle sorun olmaz, ama dikkatli olunmalı. Alternatif: Apache JMeter - Apache 2.0**) gibi bir yük testi aracının seçilmesi. Testlerin çalıştırılacağı ortamın (örn. Kubernetes üzerinde ayrı bir namespace, belirli sayıda GPU kaynağı) tanımlanması.\n            *   **İlgili Modül/Belge:** Performans Test Planı Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** Seçilen yük testi aracı.\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (test ortamı kurulumu).\n            *   **Lisans Uyumluluğu:** Locust (MIT) uyumlu. k6 (AGPLv3) dikkatle değerlendirilmeli, JMeter (Apache 2.0) uyumlu."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "### Makro Görev 1.3: CUDA Uyumluluk Test Matrisinin Oluşturulması (Öneri S5.1 ile ilişkili)\n    *   **Açıklama:** CUDA uygulamalarının farklı NVIDIA GPU mimarilerinde, sürücü versiyonlarında ve işletim sistemlerinde (eğer relevant ise) doğru çalıştığını doğrulamak için bir uyumluluk test matrisi ve planı oluşturulması.\n    *   **Mikro Görev 1.3.1:** Desteklenmesi hedeflenen GPU mimarilerinin (örn. Ampere, Turing, Volta) ve sürücü versiyon aralıklarının belirlenmesi.\n        *   **Atlas Görevi AG-QA-COMPATMATRIX-GPUS-001:**\n            *   **Açıklama:** Yönetici ve DevOps Mühendisi ile koordineli olarak, projenin hedef kitlesi ve mevcut altyapı göz önünde bulundurularak test edilecek GPU mimarileri ve sürücü versiyonlarının listelenmesi.\n            *   **İlgili Modül/Belge:** Uyumluluk Test Planı Dokümanı.\n            *   **Kullanılacak Kütüphane/Araç:** Yok (Belirleme).\n            *   **Bağımlılıklar/İlişkiler:** Yönetici, DevOps Mühendisi.\n            *   **Lisans Uyumluluğu:** N/A.\n    *   **Mikro Görev 1.3.2:** Uyumluluk testleri için temel bir test setinin (kritik fonksiyonları içeren) tanımlanması ve bu testlerin farklı ortamlarda nasıl çalıştırılacağının planlanması.\n        *   **Atlas Görevi AG-QA-COMPATMATRIX-TESTSET-001:**\n            *   **Açıklama:** En kritik CUDA fonksiyonlarını (örn. bir model çıkarımı, bir segmentasyon işlemi) içeren küçük bir test setinin seçilmesi. Bu testlerin, DevOps tarafından hazırlanan farklı CUDA sürücülerine sahip Docker imajları veya VM şablonları üzerinde nasıl çalıştırılacağının (manuel veya CI ile otomatize) planlanması.\n            *   **İlgili Modül/Belge:** Uyumluluk Test Planı Dokümanı, Temel Test Seti Scriptleri.\n            *   **Kullanılacak Kütüphane/Araç:** `pytest`.\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (test ortamları).\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "## Alt Görev 2: CUDA Entegrasyon Sürecinde Testlerin Yürütülmesi ve Hata Yönetimi"
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "*   **Açıklama:** Geliştirme süreci boyunca fonksiyonel, performans ve uyumluluk testlerinin düzenli olarak yürütülmesi, bulunan hataların takibi, raporlanması ve çözümlerinin doğrulanması."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "### Makro Görev 2.1: Fonksiyonel ve Regresyon Testlerinin Otomatize Edilmesi ve Yürütülmesi\n    *   **Açıklama:** CUDA ile ilgili birim, entegrasyon ve API testlerinin CI/CD pipeline’ına entegre edilerek her kod değişikliğinde otomatik olarak çalıştırılması ve regresyon hatalarının erken tespiti.\n    *   **Mikro Görev 2.1.1:** `pytest` ile yazılmış CUDA birim ve entegrasyon testlerinin CI pipeline’ında (GPU destekli runner üzerinde) çalıştırılmasının sağlanması.\n        *   **Atlas Görevi AG-QA-AUTOTEST-CI-001:**\n            *   **Açıklama:** DevOps Mühendisi ile işbirliği yaparak, `pytest tests/gpu/` ve `pytest tests/api/` gibi komutların CI script’ine eklenmesi ve test sonuçlarının CI arayüzünde raporlanmasının sağlanması.\n            *   **İlgili Modül/Belge:** CI/CD pipeline scripti, Test Raporlama Aracı (örn. Allure, JUnit XML).\n            *   **Kullanılacak Kütüphane/Araç:** `pytest`, CI/CD Platformu.\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (CI konfigürasyonu).\n            *   **Lisans Uyumluluğu:** N/A."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "### Makro Görev 2.2: Performans Testlerinin Periyodik Olarak Yürütülmesi ve Sonuçların Analizi\n    *   **Açıklama:** Belirlenen performans test senaryolarının, önemli geliştirme aşamalarından sonra veya periyodik olarak (örn. haftalık) yürütülmesi, sonuçların analiz edilerek performans regresyonlarının veya iyileşmelerinin takip edilmesi.\n    *   **Mikro Görev 2.2.1:** Seçilen yük testi aracı (örn. Locust) ile performans test scriptlerinin yazılması.\n        *   **Atlas Görevi AG-QA-PERFTEST-SCRIPTS-001:**\n            *   **Açıklama:** AG-QA-PERFPLAN-SCENARIOS-001’de tanımlanan senaryolar için Locustfile (`locustfile.py`) içerisinde test kullanıcı davranışlarının (API istekleri, bekleme süreleri vb.) Python kodu ile tanımlanması.\n            *   **İlgili Modül/Belge:** `locustfile.py`, Performans Test Planı.\n            *   **Kullanılacak Kütüphane/Araç:** `Locust` (MIT Lisansı - Uyumlu).\n            *   **Bağımlılıklar/İlişkiler:** API Sözleşmeleri.\n            *   **Lisans Uyumluluğu:** Locust ticari ve kapalı kaynak dağıtıma uygun.\n    *   **Mikro Görev 2.2.2:** Performans testlerinin yürütülmesi ve sonuçların (yanıt süreleri, RPS, hata oranları, GPU metrikleri) toplanıp raporlanması.\n        *   **Atlas Görevi AG-QA-PERFTEST-EXECUTE-001:**\n            *   **Açıklama:** Locust testlerinin belirlenen test ortamında (örn. Kubernetes üzerinde) çalıştırılması. Test sırasında ve sonrasında Locust arayüzünden/raporlarından ve DCGM/Prometheus/Grafana üzerinden performans metriklerinin toplanması ve bir performans test raporunda özetlenmesi.\n            *   **İlgili Modül/Belge:** Performans Test Raporu, Locust, Grafana.\n            *   **Kullanılacak Kütüphane/Araç:** Locust, Grafana (Lisans durumu dikkate alınmalı).\n            *   **Bağımlılıklar/İlişkiler:** DevOps Mühendisi (test ortamı ve izleme).\n            *   **Lisans Uyumluluğu:** Grafana OSS (AGPLv3) için dikkat."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "### Makro Görev 2.3: Hata Takip ve Yönetim Sürecinin İşletilmesi\n    *   **Açıklama:** Testler sırasında bulunan tüm hataların (fonksiyonel, performans, uyumluluk) bir hata takip sistemine (örn. Jira, GitHub Issues) detaylı bir şekilde kaydedilmesi, önceliklendirilmesi, geliştiricilere atanması ve çözümlerinin doğrulanması.\n    *   **Mikro Görev 2.3.1:** Bulunan her hata için standart bir hata raporu formatının kullanılması.\n        *   **Atlas Görevi AG-QA-BUGREPORT-001:**\n            *   **Açıklama:** Hata raporlarının; adımlar, beklenen sonuç, gerçekleşen sonuç, ekran görüntüsü/log dosyası, ortam bilgileri (GPU modeli, sürücü versiyonu, CUDA versiyonu), ciddiyet ve öncelik gibi bilgileri içerecek şekilde standart bir formatta hata takip sistemine girilmesi.\n            *   **İlgili Modül/Belge:** Hata Takip Sistemi, Hata Raporu Şablonu.\n            *   **Kullanılacak Kütüphane/Araç:** Seçilen Hata Takip Sistemi.\n            *   **Bağımlılıklar/İlişkiler:** Tüm geliştirme ekibi.\n            *   **Lisans Uyumluluğu:** Hata takip sisteminin lisansına bağlı (örn. Jira ticari, GitHub Issues ücretsiz)."
    },
    {
        "doc_id": "doc_9_qa_engineer_detailed_cuda_tasks.md_13",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md",
        "chunk_index": 13,
        "text": "*(Bu detaylandırma, QA Mühendisi personasının görevlerinin bir başlangıcıdır. Diğer Alt Görevler ve Makro/Mikro/Atlas görevleri benzer şekilde detaylandırılacaktır.)*"
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# UI/UX Tasarımcısı (Elif Aydın) - Detaylı Görev Kırılımı (CUDA Entegrasyonu)"
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, UI/UX Tasarımcısı (Elif Aydın) personasının ALT_LAS projesine CUDA entegrasyonu sürecindeki ana görevlerini, kullanıcı tarafından talep edilen hiyerarşik yapıya (Alt Görevler, Makro Görevler, Mikro Görevler ve Atlas Görevleri) göre detaylandırmaktadır."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "**Ana Sorumluluk Alanı:** CUDA entegrasyonunun kullanıcı deneyimine (UX) olumlu etkilerini maksimize etmek, performans artışlarını kullanıcı arayüzünde (UI) anlamlı ve sezgisel bir şekilde yansıtmak, AI önerilerinin şeffaflığını ve kullanılabilirliğini artırmak."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "## Alt Görev 1: CUDA Performans Artışının Kullanıcı Deneyimine Etkileri için Konsept ve Prototip Geliştirme"
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "*   **Açıklama:** Backend servislerindeki CUDA kaynaklı hızlanmaların kullanıcı tarafından nasıl algılanacağını ve bu algıyı olumlu yönde pekiştirecek UI/UX konseptlerinin geliştirilmesi. Özellikle \"anlık\" veya \"çok hızlı\" sonuçlanan işlemler için kullanıcıya geri bildirim mekanizmalarının tasarlanması."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "### Makro Görev 1.1: Hızlandırılmış İşlemler için Kullanıcı Geri Bildirim Mekanizmalarının Tasarımı (Öneri S4.2 ile ilişkili)\n    *   **Açıklama:** CUDA ile hızlandırılan işlemlerin sonuçları kullanıcıya sunulurken, bu hızın kullanıcı tarafından fark edilmesini ve takdir edilmesini sağlayacak, abartıdan uzak, zarif UI/UX çözümlerinin tasarlanması.\n    *   **Mikro Görev 1.1.1:** \"Anında Sonuç\" veya \"Hızlandırılmış İşlem\" gibi durumlar için farklı UI gösterge (indicator) konseptlerinin (ikonlar, mikro animasyonlar, metin tabanlı ipuçları) Kıdemli Frontend Geliştirici ile birlikte değerlendirilmesi ve seçilmesi.\n        *   **Atlas Görevi AG-UIUX-INDICATOR-CONCEPT-001:**\n            *   **Açıklama:** Kıdemli Frontend Geliştiricinin AG-FE-INDICATOR-CONCEPT-001 göreviyle paralel olarak, üretilen görsel gösterge fikirlerinin kullanıcı deneyimi açısından (dikkat dağıtma, anlaşılırlık, estetik) değerlendirilmesi. En uygun 2-3 konseptin seçilerek Figma/Sketch üzerinde detaylı tasarımlarının yapılması.\n            *   **İlgili Modül/Belge:** Proje UI Kiti, Marka Kimliği, Frontend Geliştirici (teknik fizibilite).\n            *   **Kullanılacak Kütüphane/Araç:** Figma (Ticari), Sketch (Ticari), veya Adobe XD (Ticari) - Tasarım araçları.\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Frontend Geliştirici.\n            *   **Lisans Uyumluluğu:** Tasarım araçları ticari lisanslıdır, çıktıları (tasarımlar) projeye aittir.\n    *   **Mikro Görev 1.1.2:** Seçilen gösterge konseptleri için yüksek sadakatli (high-fidelity) prototiplerin oluşturulması ve kullanıcı akışları içindeki yerleşimlerinin belirlenmesi.\n        *   **Atlas Görevi AG-UIUX-INDICATOR-PROTOTYPE-001:**\n            *   **Açıklama:** Figma veya benzeri bir prototipleme aracı kullanarak, hızlandırılmış işlem göstergelerinin farklı arayüz ekranlarında (örn. analiz sonuçları, model çıkarım paneli) nasıl görüneceğine ve kullanıcıyla nasıl etkileşime gireceğine dair interaktif prototiplerin oluşturulması.\n            *   **İlgili Modül/Belge:** UI Tasarım Dosyaları, Kullanıcı Akış Diyagramları.\n            *   **Kullanılacak Kütüphane/Araç:** Figma, Sketch, veya Adobe XD.\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Frontend Geliştirici (prototipin teknik uygulanabilirliği hakkında geri bildirim).\n            *   **Lisans Uyumluluğu:** Tasarım araçları ticari lisanslıdır."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "## Alt Görev 2: AI Önerileri için Kullanıcı Deneyimi ve Şeffaflık İyileştirmeleri (Öneri S6.1 ile ilişkili)"
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "*   **Açıklama:** CUDA ile hızlandırılmış AI modellerinden gelen önerilerin (örn. metin segmentasyonu, anomali tespiti) kullanıcıya daha anlaşılır, güvenilir ve eyleme geçirilebilir bir şekilde sunulması için UI/UX iyileştirmelerinin tasarlanması. Özellikle \"Neden Bu Öneri?\" gibi açıklayıcı mekanizmaların entegrasyonu."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "### Makro Görev 2.1: \"Neden Bu Öneri?\" (Explainable AI - XAI) Arayüz Komponentlerinin Tasarımı\n    *   **Açıklama:** AI tarafından üretilen önerilerin arkasındaki temel mantığı veya en etkili faktörleri kullanıcıya basit ve anlaşılır bir dille sunacak arayüz bileşenlerinin tasarlanması.\n    *   **Mikro Görev 2.1.1:** Farklı AI öneri tipleri için (örn. kategori tahmini, skor bazlı sıralama) uygun açıklama formatlarının (örn. en önemli özellikler listesi, basit bir kural özeti, güven skoru görselleştirmesi) Veri Bilimcisi ile birlikte belirlenmesi.\n        *   **Atlas Görevi AG-UIUX-XAI-FORMATS-001:**\n            *   **Açıklama:** Veri Bilimcisi ile bir çalıştay yaparak, farklı AI modellerinin ürettiği sonuçların nasıl daha şeffaf hale getirilebileceği üzerine fikir üretilmesi. Kullanıcının anlayabileceği, teknik olmayan açıklama formatlarının ve görselleştirme yöntemlerinin (örn. basit bar grafikler, vurgulamalar) taslaklarının oluşturulması.\n            *   **İlgili Modül/Belge:** Veri Bilimcisi (model çıktıları ve açıklanabilirlik yetenekleri), Kullanıcı Personaları.\n            *   **Kullanılacak Kütüphane/Araç:** Figma/Sketch, Beyaz Tahta.\n            *   **Bağımlılıklar/İlişkiler:** Veri Bilimcisi.\n            *   **Lisans Uyumluluğu:** Tasarım araçları ticari lisanslıdır.\n    *   **Mikro Görev 2.1.2:** Seçilen açıklama formatları için UI mockuplarının ve prototiplerinin oluşturulması. Bu açıklamaların öneri arayüzlerine nasıl entegre edileceğinin (örn. bir tooltip, açılır bir panel, ayrı bir detay sayfası) tasarlanması.\n        *   **Atlas Görevi AG-UIUX-XAI-MOCKUPS-001:**\n            *   **Açıklama:** Figma veya benzeri bir araçta, AI önerilerinin yanında veya detayında \"Neden?\" ikonuna tıklandığında açılacak açıklama panellerinin veya tooltip’lerinin detaylı UI tasarımlarının ve interaktif prototiplerinin oluşturulması.\n            *   **İlgili Modül/Belge:** UI Tasarım Dosyaları, AI Öneri Arayüzleri.\n            *   **Kullanılacak Kütüphane/Araç:** Figma, Sketch, veya Adobe XD.\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Frontend Geliştirici (teknik implementasyon fizibilitesi).\n            *   **Lisans Uyumluluğu:** Tasarım araçları ticari lisanslıdır."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "## Alt Görev 3: Büyük Veri Setlerinin Etkileşimli ve Performanslı Görselleştirilmesi için UI/UX Tasarımı (Öneri S6.2 ile ilişkili)"
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "*   **Açıklama:** CUDA ile işlenmiş veya analiz edilmiş büyük veri setlerinin (örn. binlerce metin, milyonlarca veri noktası) kullanıcı arayüzünde takılmadan, akıcı bir şekilde ve anlamlı içgörüler sunacak biçimde görselleştirilmesi için UI/UX stratejilerinin ve tasarımlarının geliştirilmesi. Dinamik filtreleme, sıralama ve detay seviyesi (level-of-detail) gibi tekniklerin kullanılması."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_11",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 11,
        "text": "### Makro Görev 3.1: Dinamik Filtreleme ve Sıralama Arayüzlerinin Tasarımı\n    *   **Açıklama:** Kullanıcıların büyük veri setlerini kendi ihtiyaçlarına göre anlık olarak filtreleyebileceği, sıralayabileceği ve gruplayabileceği sezgisel ve performanslı arayüz kontrollerinin tasarlanması.\n    *   **Mikro Görev 3.1.1:** Büyük veri tabloları veya listeleri için gelişmiş filtreleme seçeneklerinin (örn. çoklu kriter, aralık seçimi, metin araması) ve sıralama kontrollerinin UI tasarımlarının yapılması.\n        *   **Atlas Görevi AG-UIUX-BIGDATA-FILTER-001:**\n            *   **Açıklama:** Karmaşık veri tabloları için, her sütuna özel filtreleme seçenekleri (örn. kategorik seçim, sayısal aralık kaydırıcısı), genel bir arama çubuğu ve çoklu sütuna göre sıralama imkanı sunan bir UI panelinin Figma’da detaylı olarak tasarlanması.\n            *   **İlgili Modül/Belge:** UI Tasarım Dosyaları, Veri Modelleri (Veri Bilimcisi).\n            *   **Kullanılacak Kütüphane/Araç:** Figma.\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Frontend Geliştirici (bu filtrelerin backend API’leri veya frontend kütüphaneleri ile nasıl destekleneceği), Veri Bilimcisi.\n            *   **Lisans Uyumluluğu:** Figma ticari lisanslıdır."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_12",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 12,
        "text": "### Makro Görev 3.2: Detay Seviyesi (Level-of-Detail - LOD) ve Aşamalı Yükleme (Progressive Loading) Stratejilerinin UX Tasarımı\n    *   **Açıklama:** Çok büyük veri setlerinin ilk yüklemede kullanıcıyı bekletmemesi ve arayüzün donmaması için aşamalı yükleme (lazy loading, infinite scrolling) ve farklı zoom seviyelerinde farklı detayların gösterilmesi (LOD) gibi UX stratejilerinin tasarlanması.\n    *   **Mikro Görev 3.2.1:** Büyük bir harita veya ağ grafiği görselleştirmesi için LOD prensiplerine dayalı bir UX akışının tasarlanması.\n        *   **Atlas Görevi AG-UIUX-BIGDATA-LOD-001:**\n            *   **Açıklama:** Kullanıcı haritayı/grafiği uzaklaştırdığında (zoom out) sadece ana kümelerin veya özet bilgilerin gösterilmesi, yakınlaştırdığında (zoom in) ise daha detaylı düğümlerin, bağlantıların ve etiketlerin aşamalı olarak yüklenerek gösterileceği bir kullanıcı deneyimi akışının ve arayüz geçişlerinin Figma’da prototiplenmesi.\n            *   **İlgili Modül/Belge:** UI Tasarım Dosyaları, Veri Görselleştirme Gereksinimleri.\n            *   **Kullanılacak Kütüphane/Araç:** Figma.\n            *   **Bağımlılıklar/İlişkiler:** Kıdemli Frontend Geliştirici (teknik implementasyon), Veri Bilimcisi (veri yapısı ve özetleme stratejileri).\n            *   **Lisans Uyumluluğu:** Figma ticari lisanslıdır."
    },
    {
        "doc_id": "doc_10_ui_ux_designer_detailed_cuda_tasks.md_13",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md",
        "chunk_index": 13,
        "text": "*(Bu detaylandırma, UI/UX Tasarımcısı personasının görevlerinin bir başlangıcıdır. Kullanılabilirlik testleri, A/B test tasarımları gibi diğer Alt Görevler ve Makro/Mikro/Atlas görevleri benzer şekilde detaylandırılacaktır.)*"
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# Veri Bilimcisi (Dr. Elif Demir) için Detaylı CUDA Görev Kırılımı"
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, Veri Bilimcisi Dr. Elif Demir'in ALT_LAS projesi kapsamında, özellikle CUDA entegrasyonu ve AI model geliştirme/optimizasyon süreçlerindeki görevlerini hiyerarşik bir yapıda detaylandırmaktadır."
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "## Ana Görev 1: CUDA Tabanlı Model Eğitimi ve Optimizasyonu"
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "### Alt Görev 1.1: Mevcut Modellerin CUDA ile Hızlandırılmış Eğitim Altyapısının Kurulumu ve Testi\n    *   **Makro Görev 1.1.1:** CUDA ve cuDNN uyumlu Derin Öğrenme Kütüphanelerinin (TensorFlow, PyTorch) Kurulumu ve Yapılandırılması\n        *   **Mikro Görev 1.1.1.1:** Gerekli NVIDIA sürücülerinin, CUDA Toolkit'in ve cuDNN kütüphanesinin sunucu/geliştirme ortamına kurulması.\n            *   **Atlas Görevi AG-DS-CUDASETUP-001:** Kurulum adımlarının belgelenmesi, script oluşturulması (varsa). İlgili Modül: Yok (Sistem Kurulumu). Kütüphane: NVIDIA Drivers, CUDA, cuDNN. Bağımlılık: Sistem yönetimi. Lisans: NVIDIA Yazılım Lisansı.\n        *   **Mikro Görev 1.1.1.2:** TensorFlow-GPU ve PyTorch'un CUDA destekli versiyonlarının kurulumu ve temel bir model ile GPU kullanımının doğrulanması.\n            *   **Atlas Görevi AG-DS-LIBTEST-001:** `nvidia-smi` ile GPU tanıma, `tf.config.list_physical_devices('GPU')` ve `torch.cuda.is_available()` kontrolü. İlgili Modül: Yok (Test Scripti). Kütüphane: TensorFlow-GPU, PyTorch. Bağımlılık: CUDA/cuDNN. Lisans: Apache 2.0 (TF), BSD-benzeri (PyTorch).\n    *   **Makro Görev 1.1.2:** Mevcut Model Eğitim Scriptlerinin CUDA Kullanımına Uyarlanması\n        *   **Mikro Görev 1.1.2.1:** Eğitim scriptlerinde veri yükleme (DataLoaders) ve modelin GPU'ya taşınması (`.to(device)`) adımlarının implementasyonu.\n            *   **Atlas Görevi AG-DS-SCRIPTGPU-001:** PyTorch için `device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")` kullanımı. İlgili Modül: `model_training_scripts/`. Kütüphane: PyTorch/TensorFlow. Bağımlılık: Model scriptleri. Lisans: Proje Lisansı.\n        *   **Mikro Görev 1.1.2.2:** Dağıtık eğitim (Multi-GPU) için `torch.nn.DataParallel` veya `DistributedDataParallel` (DDP) entegrasyonunun araştırılması ve temel implementasyonu.\n            *   **Atlas Görevi AG-DS-DISTRIBUTED-001:** DDP için gerekli ortam değişkenleri ve script modifikasyonları. İlgili Modül: `model_training_scripts/`. Kütüphane: PyTorch. Bağımlılık: Birden fazla GPU. Lisans: BSD-benzeri."
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "### Alt Görev 1.2: Model Çıkarım (Inference) Süreçlerinin TensorRT ile Optimizasyonu\n    *   **Makro Görev 1.2.1:** Eğitilmiş Modellerin TensorRT Optimizasyonu için Hazırlanması\n        *   **Mikro Görev 1.2.1.1:** Modellerin ONNX formatına dönüştürülmesi (Yazılım Mimarı ile koordineli).\n            *   **Atlas Görevi AG-DS-ONNXCONV-001:** `torch.onnx.export` veya `tf2onnx` kullanımı. İlgili Modül: `model_conversion_scripts/`. Kütüphane: PyTorch, TensorFlow, ONNX, tf2onnx. Bağımlılık: Eğitilmiş model dosyaları. Lisans: BSD-benzeri, Apache 2.0, MIT.\n        *   **Mikro Görev 1.2.1.2:** TensorRT için optimizasyon profillerinin (FP16, INT8 quantization) araştırılması ve tanımlanması.\n            *   **Atlas Görevi AG-DS-TRTPROFILE-001:** TensorRT dokümantasyonunun incelenmesi, kalibrasyon veri setlerinin hazırlanması. İlgili Modül: Yok (Araştırma/Belgeleme). Kütüphane: TensorRT. Bağımlılık: ONNX modeli. Lisans: NVIDIA Yazılım Lisansı.\n    *   **Makro Görev 1.2.2:** TensorRT Motorlarının Oluşturulması ve Performans Testleri\n        *   **Mikro Görev 1.2.2.1:** ONNX modellerinden TensorRT motorlarının (`.engine` dosyaları) oluşturulması.\n            *   **Atlas Görevi AG-DS-TRTENGINE-001:** `trtexec` aracı veya TensorRT Python API'sinin kullanılması. İlgili Modül: `tensorrt_scripts/`. Kütüphane: TensorRT. Bağımlılık: ONNX modeli, optimizasyon profili. Lisans: NVIDIA Yazılım Lisansı.\n        *   **Mikro Görev 1.2.2.2:** Optimize edilmiş TensorRT motorlarının çıkarım hızı ve doğruluk açısından orijinal modellerle karşılaştırılması.\n            *   **Atlas Görevi AG-DS-TRTTEST-001:** Test scriptleri ile latency ve throughput ölçümleri, doğruluk metriklerinin (accuracy, mAP vb.) karşılaştırılması. İlgili Modül: `performance_testing_scripts/`. Kütüphane: TensorRT, PyTorch/TensorFlow. Bağımlılık: TensorRT motoru, test veri seti. Lisans: Proje Lisansı."
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "## Ana Görev 2: Yeni AI Modellerinin Geliştirilmesi ve CUDA ile Entegrasyonu"
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Alt Görev 2.1: Proje İhtiyaçlarına Yönelik Yeni Model Mimarilerinin Araştırılması ve Tasarımı\n    *   **Makro Görev 2.1.1:** Literatür Taraması ve Son Teknoloji Modellerin İncelenmesi\n        *   **Mikro Görev 2.1.1.1:** İlgili problem alanındaki (örn: görüntü işleme, doğal dil işleme) güncel makalelerin ve açık kaynaklı modellerin araştırılması.\n            *   **Atlas Görevi AG-DS-LITREVIEW-001:** PapersWithCode, arXiv gibi kaynakların taranması. İlgili Modül: Yok (Araştırma). Kütüphane: Yok. Bağımlılık: Yok. Lisans: Yok.\n    *   **Makro Görev 2.1.2:** Seçilen Model Mimarilerinin Prototipinin Geliştirilmesi\n        *   **Mikro Görev 2.1.2.1:** Küçük bir veri seti üzerinde model prototipinin PyTorch/TensorFlow ile kodlanması ve temel eğitimin yapılması.\n            *   **Atlas Görevi AG-DS-PROTOTYPE-001:** Model tanımı, eğitim döngüsü, kayıp fonksiyonu implementasyonu. İlgili Modül: `new_model_prototypes/`. Kütüphane: PyTorch/TensorFlow. Bağımlılık: Veri seti. Lisans: Proje Lisansı."
    },
    {
        "doc_id": "doc_11_data_scientist_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "### Alt Görev 2.2: Veri Ön İşleme ve Artırma (Data Augmentation) Pipeline'larının CUDA ile Hızlandırılması\n    *   **Makro Görev 2.2.1:** GPU Tabanlı Veri İşleme Kütüphanelerinin (DALI, cuPy) Araştırılması ve Entegrasyonu\n        *   **Mikro Görev 2.2.1.1:** NVIDIA DALI (Data Loading Library) kütüphanesinin mevcut veri yükleme pipeline'larına entegrasyon potansiyelinin değerlendirilmesi.\n            *   **Atlas Görevi AG-DS-DALI-001:** DALI pipeline'larının tasarlanması ve test edilmesi. İlgili Modül: `data_processing_scripts/`. Kütüphane: NVIDIA DALI. Bağımlılık: Veri setleri. Lisans: Apache 2.0.\n        *   **Mikro Görev 2.2.1.2:** cuPy kullanılarak NumPy tabanlı ön işleme adımlarının GPU'ya taşınması.\n            *   **Atlas Görevi AG-DS-CUPY-001:** NumPy kodunun cuPy eşdeğerleriyle değiştirilmesi ve performans karşılaştırması. İlgili Modül: `data_processing_scripts/`. Kütüphane: cuPy. Bağımlılık: NumPy kodu. Lisans: MIT."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_0",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 0,
        "text": "# Proje Yöneticisi için Detaylı CUDA Görev Kırılımı ve Yönetimsel Sorumluluklar"
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_1",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 1,
        "text": "Bu belge, Proje Yöneticisi'nin ALT_LAS projesi kapsamında, özellikle CUDA entegrasyonu ve genel proje yönetimi süreçlerindeki görevlerini hiyerarşik bir yapıda detaylandırmaktadır. Bu görevler, yeni oluşturulan \"Yönetici Ofisi\" yapısı ve diğer AI personalarının etkin koordinasyonunu sağlamaya odaklanmıştır."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_2",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 2,
        "text": "## Ana Görev 1: Proje Planlama, Takip ve Raporlama (Yönetici Ofisi Entegrasyonu)"
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_3",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 3,
        "text": "### Alt Görev 1.1: Detaylı Proje Planının Oluşturulması ve Güncel Tutulması\n    *   **Makro Görev 1.1.1:** Tüm Personalardan Gelen Görev Kırılımlarının Entegrasyonu ve Ana Proje Planının Konsolidasyonu\n        *   **Mikro Görev 1.1.1.1:** Her persona için oluşturulan detaylı görev kırılım dosyalarının (`*_detailed_cuda_tasks.md`) toplanması ve `/Planlama_Ofisi/` altındaki ana plan belgeleriyle (örn: `cuda_master_integration_plan.md`) senkronizasyonunun sağlanması.\n            *   **Atlas Görevi AG-PM-PLANCONSOL-001:** Planlama dosyalarının versiyon kontrolü ve merkezi bir zaman çizelgesi oluşturulması. İlgili Modül: Yok (Belge Yönetimi). Kütüphane/Araç: Proje Yönetim Yazılımı (varsa, örn: Jira, Trello veya Markdown tabanlı takip). Bağımlılık: Tüm persona görev kırılımları. Lisans: N/A.\n        *   **Mikro Görev 1.1.1.2:** Proje kilometre taşlarının, bağımlılıkların ve kritik yolun belirlenmesi.\n            *   **Atlas Görevi AG-PM-CRITICALPATH-001:** Gantt şeması veya benzeri bir görselleştirme aracı ile kritik yol analizi. İlgili Modül: Yok (Analiz). Kütüphane/Araç: Proje Yönetim Yazılımı. Bağımlılık: Konsolide plan. Lisans: N/A.\n    *   **Makro Görev 1.1.2:** \"Yönetici Ofisi\" Yapısının İşlerliğinin Sağlanması ve Takibi\n        *   **Mikro Görev 1.1.2.1:** `/Yonetici_Ofisi/ofis_durumu.md` dosyasının oluşturulması ve \"Koltuk Durumu\" (1 adet, dolu/boş) ile \"Mevcut Aktif Görev\" bilgilerinin güncel tutulması için bir süreç tanımlanması.\n            *   **Atlas Görevi AG-PM-OFFICESTATUS-001:** `ofis_durumu.md` için şablon oluşturma, hangi AI personanın ne zaman güncelleyeceğine dair protokol belirleme. İlgili Modül: Yok (Belge Yönetimi). Kütüphane/Araç: Yok. Bağımlılık: Yok. Lisans: N/A.\n        *   **Mikro Görev 1.1.2.2:** Her persona için \"Persona Gelişimi\" kayıt dosyalarının (`/Yonetici_Ofisi/Persona_Ofisleri/[Persona_Adi]_Ofisi/persona_gelisimi.md`) düzenli olarak güncellenmesinin teşvik edilmesi ve takibi.\n            *   **Atlas Görevi AG-PM-PERSONADEVTAKIP-001:** Haftalık veya görev bazlı hatırlatmalar, gelişim kayıtlarının gözden geçirilmesi. İlgili Modül: Yok (Koordinasyon). Kütüphane/Araç: Yok. Bağımlılık: Persona Gelişimi dosyaları. Lisans: N/A."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_4",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 4,
        "text": "### Alt Görev 1.2: Risk Yönetimi ve Proaktif Sorun Çözümü\n    *   **Makro Görev 1.2.1:** Potansiyel Proje Risklerinin Belirlenmesi ve Önleyici Faaliyetlerin Planlanması\n        *   **Mikro Görev 1.2.1.1:** Risk matrisinin oluşturulması ve düzenli olarak güncellenmesi.\n            *   **Atlas Görevi AG-PM-RISKMATRIX-001:** Teknik, operasyonel, zamanlama ve bütçe risklerinin tanımlanması, olasılık ve etki değerlendirmesi. İlgili Modül: Yok (Belge Yönetimi). Kütüphane/Araç: Yok. Bağımlılık: Proje planı. Lisans: N/A.\n    *   **Makro Görev 1.2.2:** Acil Durum Görevlerinin Yönetimi ve Takibi\n        *   **Mikro Görev 1.2.2.1:** `/Acil_Gorevler/` klasörüne gelen görevlerin önceliklendirilmesi ve ilgili personalara atanması.\n            *   **Atlas Görevi AG-PM-URGENTTASK-001:** Acil görevler için bir triyaj ve atama süreci tanımlanması. İlgili Modül: Yok (Koordinasyon). Kütüphane/Araç: Yok. Bağımlılık: Yok. Lisans: N/A."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_5",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 5,
        "text": "## Ana Görev 2: İletişim, Koordinasyon ve Paydaş Yönetimi"
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_6",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 6,
        "text": "### Alt Görev 2.1: Ekip İçi ve Ekipler Arası Etkili İletişimin Sağlanması\n    *   **Makro Görev 2.1.1:** Düzenli Proje Toplantılarının Organize Edilmesi ve Yönetilmesi\n        *   **Mikro Görev 2.1.1.1:** Haftalık ilerleme toplantıları ve gerektiğinde özel konu toplantılarının planlanması, gündemlerinin hazırlanması ve toplantı notlarının tutularak `/Yonetici_Ofisi/Genel_Belgeler/Toplanti_Notlari/` altında arşivlenmesi.\n            *   **Atlas Görevi AG-PM-MEETINGS-001:** Toplantı davetleri, gündem şablonu, karar ve aksiyon takibi. İlgili Modül: Yok (Organizasyon). Kütüphane/Araç: Takvim, E-posta. Bağımlılık: Yok. Lisans: N/A.\n    *   **Makro Görev 2.1.2:** Dokümantasyon ve Raporlama Standartlarının Uygulanmasının Sağlanması\n        *   **Mikro Görev 2.1.2.1:** Her görevin tamamlanma kriterleri arasında yer alan raporlama, dokümantasyon güncelleme ve GitHub push işlemlerinin takibi ve kalite kontrolü.\n            *   **Atlas Görevi AG-PM-DOCREPORTRULES-001:** `hierarchical_task_structure_definition.md` dosyasında belirtilen tamamlama kriterlerine uyumun denetlenmesi. İlgili Modül: Yok (Denetim). Kütüphane/Araç: GitHub. Bağımlılık: Persona görev çıktıları. Lisans: N/A."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_7",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 7,
        "text": "### Alt Görev 2.2: Proje İlerleyişinin Üst Yönetime ve Kullanıcıya Raporlanması\n    *   **Makro Görev 2.2.1:** Periyodik İlerleme Raporlarının Hazırlanması\n        *   **Mikro Görev 2.2.1.1:** Haftalık/Aylık ilerleme raporlarının derlenmesi, önemli başarıların ve karşılaşılan sorunların vurgulanması.\n            *   **Atlas Görevi AG-PM-PROGRESSREPORT-001:** Rapor şablonu oluşturma, personalardan gelen bilgilerin konsolidasyonu. İlgili Modül: Yok (Belge Hazırlama). Kütüphane/Araç: Yok. Bağımlılık: Persona raporları. Lisans: N/A."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_8",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 8,
        "text": "## Ana Görev 3: Kaynak Yönetimi ve Proje Arşivlerinin Düzenlenmesi"
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_9",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 9,
        "text": "### Alt Görev 3.1: Proje Kaynaklarının (İnsan, Zaman, Araçlar) Etkin Kullanımının Sağlanması\n    *   **Makro Görev 3.1.1:** Görev Atamalarının ve İş Yükü Dağılımının Optimize Edilmesi\n        *   **Mikro Görev 3.1.1.1:** Personalara görev atamalarının yapılması ve iş yüklerinin dengeli bir şekilde dağıtıldığından emin olunması.\n            *   **Atlas Görevi AG-PM-TASKASSIGN-001:** Persona yetkinlikleri ve mevcut iş yükleri dikkate alınarak görev dağılımı. İlgili Modül: Yok (Koordinasyon). Kütüphane/Araç: Proje Yönetim Yazılımı. Bağımlılık: Görev listesi. Lisans: N/A."
    },
    {
        "doc_id": "doc_12_project_manager_detailed_cuda_tasks.md_10",
        "source_file": "/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md",
        "chunk_index": 10,
        "text": "### Alt Görev 3.2: Proje Çıktılarının ve Belgelerinin Arşivlenmesi\n    *   **Makro Görev 3.2.1:** `/Proje_Arsivi/` ve `/Yonetici_Ofisi/Yonetim_Arsivi/` Klasörlerinin Düzenli Tutulması\n        *   **Mikro Görev 3.2.1.1:** Tamamlanan görevlere ait eski veya artık aktif olmayan dosyaların ilgili arşiv klasörlerine taşınması için bir süreç oluşturulması ve denetlenmesi.\n            *   **Atlas Görevi AG-PM-ARCHIVING-001:** Arşivleme politikalarının belirlenmesi, düzenli arşivleme periyotları. İlgili Modül: Yok (Yönetim). Kütüphane/Araç: Yok. Bağımlılık: Yok. Lisans: N/A.\n        *   **Mikro Görev 3.2.1.2:** Klonlanan ana proje kodunun (`/Proje_Kodu/`) ve diğer önemli proje dosyalarının düzenli olarak yedeklenmesi için DevOps Mühendisi ile koordinasyon.\n            *   **Atlas Görevi AG-PM-BACKUPCOORD-001:** Yedekleme sıklığı ve yönteminin belirlenmesi. İlgili Modül: Yok (Koordinasyon). Kütüphane/Araç: Yok. Bağımlılık: DevOps Mühendisi. Lisans: N/A."
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_0",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 0,
        "text": "# License Compatibility Analysis for Commercial Closed-Source Distribution"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_1",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 1,
        "text": "This document analyzes the licenses of identified libraries and modules for the ALT_LAS project, focusing on their compatibility with commercial, closed-source distribution as per the user's requirement. The term \"free\" is interpreted as allowing royalty-free distribution and use in proprietary, closed-source software."
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_2",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 2,
        "text": "## 1. Core Technologies & SDKs"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_3",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 3,
        "text": "*   **NVIDIA CUDA Toolkit (including cuBLAS, cuFFT, cuDNN, Thrust, etc.)**\n    *   **License:** NVIDIA CUDA Toolkit EULA.\n    *   **Analysis:** The EULA generally permits the distribution of applications developed using the CUDA Toolkit. Runtime libraries (e.g., `cudart.dll`, `cublas.dll`) are typically redistributable with the application, subject to the terms of the EULA. The EULA should be reviewed for specific redistribution rights and any notice requirements. No royalty fees are typically associated with distributing applications built with CUDA.\n    *   **Compatibility:** **Likely Compatible (Review EULA for specifics on redistributables).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_4",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 4,
        "text": "*   **NVIDIA Drivers**\n    *   **License:** NVIDIA Software License Agreement.\n    *   **Analysis:** End-users typically download and install drivers themselves. Distributing NVIDIA drivers directly with a commercial product is generally not permitted or practical. The application will rely on the user having appropriate drivers installed.\n    *   **Compatibility:** **Not Applicable for direct redistribution (application relies on user-installed drivers).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_5",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 5,
        "text": "*   **NVIDIA Nsight Suite (Systems, Compute, Graphics)**\n    *   **License:** NVIDIA Software License Agreement.\n    *   **Analysis:** These are development tools and are not typically redistributed with the end-product. Their use during development does not restrict the licensing of the developed application.\n    *   **Compatibility:** **Compatible (as development tools, not redistributed).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_6",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 6,
        "text": "*   **NVIDIA TensorRT**\n    *   **License:** NVIDIA TensorRT EULA.\n    *   **Analysis:** The TensorRT runtime libraries are generally redistributable with applications, similar to CUDA runtime libraries, subject to EULA terms. This allows optimized models to be deployed in commercial, closed-source applications.\n    *   **Compatibility:** **Likely Compatible (Review EULA for specifics on redistributables).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_7",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 7,
        "text": "*   **NVIDIA Container Toolkit**\n    *   **License:** Primarily Apache 2.0 for many components, with some parts under NVIDIA EULA.\n    *   **Analysis:** Used for building and running GPU-accelerated Docker containers. The toolkit itself is not part of the distributed application but facilitates its deployment. Apache 2.0 components are permissive.\n    *   **Compatibility:** **Compatible (as a deployment tool).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_8",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 8,
        "text": "*   **NVIDIA DCGM (Data Center GPU Manager)**\n    *   **License:** NVIDIA EULA.\n    *   **Analysis:** Used for monitoring and managing GPUs in data centers. If any part of DCGM (e.g., client libraries) were to be bundled, the EULA would need careful review. Typically, it's a separate infrastructure tool.\n    *   **Compatibility:** **Likely Compatible (if used as a separate tool, review EULA if any components are bundled).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_9",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 9,
        "text": "## 2. Programming Languages & Compilers"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_10",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 10,
        "text": "*   **Python**\n    *   **License:** Python Software Foundation License (PSF).\n    *   **Analysis:** A permissive, GPL-compatible license that allows for commercial, closed-source distribution of Python applications.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_11",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 11,
        "text": "*   **C/C++ Compilers (GCC, Clang, MSVC)**\n    *   **GCC:** GPL with runtime library exception. The exception allows linking GCC's runtime libraries with proprietary code.\n    *   **Clang:** Apache License 2.0 (compiler) and various licenses for its runtime libraries (e.g., LLVM exceptions to Apache 2.0, or BSD/MIT for libc++).\n    *   **MSVC:** Microsoft specific EULA. Generally allows distribution of compiled binaries built with it.\n    *   **Analysis:** All are generally suitable for developing commercial, closed-source applications.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_12",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 12,
        "text": "## 3. AI/ML Frameworks & Libraries"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_13",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 13,
        "text": "*   **TensorFlow**\n    *   **License:** Apache 2.0.\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_14",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 14,
        "text": "*   **PyTorch**\n    *   **License:** BSD-style (modified).\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_15",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 15,
        "text": "*   **Llama.cpp**\n    *   **License:** MIT License.\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_16",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 16,
        "text": "*   **CuPy**\n    *   **License:** MIT License.\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_17",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 17,
        "text": "*   **Numba (CUDA features)**\n    *   **License:** BSD 2-Clause.\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_18",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 18,
        "text": "*   **RAPIDS (cuML, cuDF)**\n    *   **License:** Apache 2.0.\n    *   **Analysis:** Permissive license, allows commercial, closed-source use and distribution.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_19",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 19,
        "text": "## 4. Development & Testing Tools"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_20",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 20,
        "text": "*   **Python cProfile, Py-Spy**\n    *   **License:** PSF (cProfile), MIT (Py-Spy).\n    *   **Analysis:** Development tools, not typically redistributed. Licenses are permissive.\n    *   **Compatibility:** **Compatible (as development tools).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_21",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 21,
        "text": "*   **Google Test**\n    *   **License:** BSD 3-Clause.\n    *   **Analysis:** Testing framework, not typically redistributed. License is permissive.\n    *   **Compatibility:** **Compatible (as a testing tool).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_22",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 22,
        "text": "*   **PyTest**\n    *   **License:** MIT License.\n    *   **Analysis:** Testing framework, not typically redistributed. License is permissive.\n    *   **Compatibility:** **Compatible (as a testing tool).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_23",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 23,
        "text": "## 5. Deployment & Orchestration"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_24",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 24,
        "text": "*   **Docker**\n    *   **License:** Apache 2.0 (for Docker Engine).\n    *   **Analysis:** Deployment tool. License is permissive.\n    *   **Compatibility:** **Compatible (as a deployment tool).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_25",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 25,
        "text": "*   **Kubernetes**\n    *   **License:** Apache 2.0.\n    *   **Analysis:** Orchestration tool. License is permissive.\n    *   **Compatibility:** **Compatible (as an orchestration tool).**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_26",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 26,
        "text": "*   **NVIDIA Device Plugin for Kubernetes**\n    *   **License:** Apache 2.0.\n    *   **Analysis:** Facilitates GPU use in Kubernetes. License is permissive.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_27",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 27,
        "text": "## 6. Monitoring & Visualization Tools"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_28",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 28,
        "text": "*   **Prometheus**\n    *   **License:** Apache 2.0.\n    *   **Analysis:** Permissive. If client libraries are bundled, they are also typically Apache 2.0.\n    *   **Compatibility:** **Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_29",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 29,
        "text": "*   **Grafana**\n    *   **License:** AGPLv3 for Grafana OSS; Apache 2.0 for Grafana Enterprise (requires commercial license from Grafana Labs).\n    *   **Analysis:** **AGPLv3 is highly problematic for commercial, closed-source distribution.** If Grafana OSS is distributed as part of the ALT_LAS product, or if the product is considered a derivative work (e.g., by embedding or deeply integrating Grafana OSS UI components and distributing them), the entire ALT_LAS product might be required to be licensed under AGPLv3. This conflicts with the closed-source goal.\n        *   Using Grafana OSS internally for monitoring (not distributed) is fine.\n        *   Linking to a separate, user-deployed Grafana OSS instance is fine.\n        *   Using Grafana Enterprise requires a commercial agreement with Grafana Labs.\n        *   Client libraries used to *send data to* Grafana/Prometheus are usually permissively licensed (e.g., Apache 2.0) and are fine to bundle.\n    *   **Compatibility:** **Potentially Incompatible (if Grafana OSS is distributed or deeply integrated). Requires careful consideration of usage and potential alternatives if direct bundling/derivation is planned.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_30",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 30,
        "text": "## 7. Web Technologies"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_31",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 31,
        "text": "*   **WebGPU**\n    *   **License:** Web standard; browser implementations (e.g., Dawn in Chrome - Apache 2.0, wgpu in Firefox - MPL 2.0) are permissively licensed.\n    *   **Analysis:** If the project uses WebGPU via a browser, the browser's license applies to that component. If a standalone WebGPU library were to be bundled (e.g., in an Electron app), that specific library's license would need checking, but they are typically permissive.\n    *   **Compatibility:** **Likely Compatible.**"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_32",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 32,
        "text": "## Summary of Key Considerations:"
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_33",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 33,
        "text": "1.  **NVIDIA EULAs:** While generally supportive of distributing applications built with their tools, the specific EULAs for CUDA Toolkit, TensorRT, and any other directly bundled NVIDIA runtime components should be reviewed by legal counsel to ensure full compliance with redistribution terms and any notice requirements.\n2.  **Grafana OSS (AGPLv3):** This is the most significant licensing concern identified. If the project intends to distribute Grafana OSS dashboards or UI components as an integrated part of the closed-source commercial product, this is likely not feasible under AGPLv3. Alternatives would be: \n    *   Using Grafana Enterprise (commercial license).\n    *   Building custom dashboards using permissively licensed charting libraries.\n    *   Having users connect to their own Grafana instances.\n    *   Ensuring any interaction is via APIs and no AGPL code is part of the distributed product.\n3.  **Permissive Licenses (MIT, Apache 2.0, BSD):** The majority of the open-source tools (Python, TensorFlow, PyTorch, RAPIDS, etc.) use permissive licenses that are well-suited for commercial, closed-source products. These generally require attribution."
    },
    {
        "doc_id": "doc_13_license_analysis_summary.md_34",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md",
        "chunk_index": 34,
        "text": "**Recommendation:** A legal review of NVIDIA EULAs is advisable. The use and integration strategy for Grafana needs to be clarified; if bundling or creating a derivative work of Grafana OSS is planned, an alternative approach or a commercial Grafana license will be necessary."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_0",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 0,
        "text": "# Recommendations for Incompatible or Risky Licenses"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_1",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 1,
        "text": "This document provides recommendations and alternatives for libraries identified with potentially incompatible licenses for commercial, closed-source distribution of the ALT_LAS project, based on the analysis in `license_analysis_summary.md`."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_2",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 2,
        "text": "## 1. Grafana OSS (AGPLv3 License)"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_3",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 3,
        "text": "The AGPLv3 license of Grafana OSS poses a significant risk if the project intends to distribute Grafana OSS dashboards or UI components as an integrated part of a closed-source commercial product. Distributing or creating a derivative work of AGPLv3-licensed software generally requires the entire product to be licensed under AGPLv3, which conflicts with the closed-source goal."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_4",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 4,
        "text": "**Recommendations & Alternatives:**"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_5",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 5,
        "text": "1.  **Use Grafana Enterprise:** Obtain a commercial license from Grafana Labs for Grafana Enterprise. This version is designed for commercial use and does not have the AGPLv3 restrictions for distribution.\n    *   **Pros:** Full Grafana functionality, official support.\n    *   **Cons:** Licensing costs."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_6",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 6,
        "text": "2.  **Build Custom Dashboards:** Develop custom dashboarding and visualization capabilities within the ALT_LAS application using permissively licensed charting libraries. \n    *   **Examples of Permissively Licensed Charting Libraries:**\n        *   **Apache ECharts (Apache 2.0):** A powerful, free, and open-source charting and visualization library.\n        *   **Chart.js (MIT License):** Simple yet flexible JavaScript charting for designers & developers.\n        *   **D3.js (BSD 3-Clause License):** A JavaScript library for manipulating documents based on data, highly flexible for custom visualizations.\n    *   **Pros:** Full control over UI/UX, no restrictive licensing issues from the dashboarding component itself.\n    *   **Cons:** Development effort and time required to build custom dashboards."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_7",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 7,
        "text": "3.  **User-Managed Grafana Instance:** Design the ALT_LAS project to integrate with a Grafana instance managed and deployed by the end-user. The ALT_LAS product would then only send data to this external Grafana instance (e.g., via Prometheus as a data source) or provide links/guidance on how to set up dashboards.\n    *   **Pros:** Avoids distributing Grafana OSS. Shifts responsibility of Grafana licensing to the user.\n    *   **Cons:** Less integrated user experience; relies on the user to set up and manage Grafana."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_8",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 8,
        "text": "4.  **API-Only Interaction with Grafana (If applicable):** If the interaction with Grafana is purely through APIs (e.g., ALT_LAS pushes data to Grafana, or pulls aggregated data from Grafana APIs without embedding Grafana's UI or distributing its code), this *might* be acceptable. However, this requires careful legal scrutiny to ensure no part of the AGPLv3 code is considered part of the distributed product or that the product is not considered a derivative work.\n    *   **Pros:** Potentially leverages existing Grafana instances.\n    *   **Cons:** High legal risk if not structured correctly; limited integration possibilities."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_9",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 9,
        "text": "**Recommended Action for Grafana:** Clarify the intended level of integration with Grafana. If deep integration or distribution of dashboarding capabilities is required, pursuing custom dashboards with permissive libraries (Option 2) or obtaining a Grafana Enterprise license (Option 1) are the safest routes for a commercial, closed-source product."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_10",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 10,
        "text": "## 2. NVIDIA EULAs (CUDA Toolkit, TensorRT, etc.)"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_11",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 11,
        "text": "While NVIDIA EULAs generally permit the distribution of applications developed using their SDKs (like CUDA Toolkit and TensorRT runtime libraries), these are legal agreements with specific terms and conditions."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_12",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 12,
        "text": "**Recommendations:**"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_13",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 13,
        "text": "1.  **Mandatory Legal Review:** It is strongly recommended that legal counsel reviews all applicable NVIDIA EULAs (CUDA Toolkit, TensorRT, DCGM if bundled, etc.) before any commercial distribution of the ALT_LAS project. This review should confirm:\n    *   Specific rights and limitations for redistributing runtime libraries and other components.\n    *   Any notice requirements (e.g., including NVIDIA copyright notices or EULA text with the distributed product).\n    *   Compliance with any other obligations imposed by the EULAs.\n2.  **Clear Identification of Redistributables:** Ensure the development team clearly identifies which specific NVIDIA runtime libraries are being packaged and distributed with the ALT_LAS application. This list should be provided to legal counsel for review against the EULAs."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_14",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 14,
        "text": "## 3. General Permissive Licenses (MIT, Apache 2.0, BSD)"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_15",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 15,
        "text": "Most other identified libraries (TensorFlow, PyTorch, RAPIDS, CuPy, Llama.cpp, Numba, etc.) use permissive licenses like Apache 2.0, MIT, or BSD."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_16",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 16,
        "text": "**Recommendations:**"
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_17",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 17,
        "text": "1.  **Attribution Requirements:** While these licenses allow for commercial, closed-source use, they typically have attribution requirements (e.g., including a copy of the license text or acknowledging the use of the software in documentation). Ensure these requirements are met.\n2.  **Verify Specific Versions:** Always ensure that the specific versions of the libraries being used are indeed covered by the expected permissive license, as licenses can occasionally change between versions (though rare for established projects)."
    },
    {
        "doc_id": "doc_14_license_recommendations_and_alternatives.md_18",
        "source_file": "/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md",
        "chunk_index": 18,
        "text": "By addressing these points, particularly the Grafana AGPLv3 issue and conducting a legal review of NVIDIA EULAs, the ALT_LAS project can better ensure compliance with its goal of commercial, closed-source distribution using freely licensed components."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_0",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 0,
        "text": "# Embedding Tabanlı Dokümantasyon İyileştirme: Tasarım Belgesi"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_1",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 1,
        "text": "Bu belge, ALT_LAS projesi dokümantasyonunun yapay zeka (AI) tarafından daha etkin kullanılabilmesi için embedding tabanlı özelliklerin tasarımını ve iş akışını detaylandırmaktadır. İlk aşamada Anlamsal Arama, Hibrit Arama ve Görevler için Bağlamsal Bilgi Sağlama özelliklerine odaklanılacaktır."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_2",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 2,
        "text": "## 1. Hedeflenen Özellikler (İlk Aşama)"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_3",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 3,
        "text": "1.  **Anlamsal Arama (Semantic Search):** Kullanıcıların veya AI personalarının doğal dil sorgularıyla dokümantasyon içinde anlamsal olarak en alakalı bölümleri bulmalarını sağlar.\n2.  **Hibrit Arama (Hybrid Search):** Anlamsal aramanın gücünü, anahtar kelime tabanlı aramanın kesinliği ile birleştirir.\n3.  **Görevler için Bağlamsal Bilgi Sağlama (Contextual Task Assistance):** Bir AI personasına görev atandığında, görev tanımıyla ilgili en alakalı dokümantasyon bölümlerini otomatik olarak önerir."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_4",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 4,
        "text": "## 2. Hedef Dokümanlar"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_5",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 5,
        "text": "İlk aşamada aşağıdaki dokümanlar embedding işlemine tabi tutulacaktır:"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_6",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 6,
        "text": "*   **Yönetici Ofisi ve Planlama Dokümanları:**\n    *   `/Planlama_Ofisi/ana_gorev_panosu.md`\n    *   `/Planlama_Ofisi/hierarchical_task_structure_definition.md`\n    *   `/Yonetici_Ofisi/Genel_Belgeler/YONETICI_OFISI_KULLANIM_KILAVUZU.md`\n    *   `/Yonetici_Ofisi/Genel_Belgeler/standart_gorev_atama_sablonu.md`\n    *   `/Yonetici_Ofisi/ofis_durumu.md`\n*   **Persona Görev Tanımları:**\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/Yazilim_Mimari_Elif_Yilmaz_Ofisi/Calisma_Dosyalari/architect_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Backend_Gelistirici_Ahmet_Celik_Ofisi/Calisma_Dosyalari/backend_developer_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/DevOps_Muhendisi_Can_Tekin_Ofisi/Calisma_Dosyalari/devops_engineer_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/Kidemli_Frontend_Gelistirici_Zeynep_Aydin_Ofisi/Calisma_Dosyalari/frontend_developer_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/QA_Muhendisi_Ayse_Kaya_Ofisi/Calisma_Dosyalari/qa_engineer_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/UI_UX_Tasarimcisi_Elif_Aydin_Ofisi/Calisma_Dosyalari/ui_ux_designer_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/Veri_Bilimcisi_Dr_Elif_Demir_Ofisi/Calisma_Dosyalari/data_scientist_detailed_cuda_tasks.md`\n    *   `/Yonetici_Ofisi/Persona_Ofisleri/Proje_Yoneticisi_Ofisi/Calisma_Dosyalari/project_manager_detailed_cuda_tasks.md`\n*   **Lisans Analizleri:**\n    *   `/Yonetici_Ofisi/Genel_Belgeler/license_analysis_summary.md`\n    *   `/Yonetici_Ofisi/Genel_Belgeler/license_recommendations_and_alternatives.md`\n*   **Proje Kodu Dokümantasyonu (Örnek):**\n    *   Proje yapısı ve AI görevleriyle doğrudan ilgili kritik README dosyaları veya teknik açıklamalar (örneğin, `/Proje_Kodu/segmentation-service/README.md` gibi, eğer varsa ve AI için önemliyse)."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_7",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 7,
        "text": "## 3. Embedding İş Akışı"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_8",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 8,
        "text": "1.  **Doküman Ön İşleme (Document Preprocessing):**\n    *   **Bölütleme (Chunking):** Markdown dosyaları mantıksal bölümlere ayrılacaktır. Öncelikli olarak başlıklar (H1, H2, H3 vb.) ve paragraflar temelinde bölütleme yapılacaktır. Atlas Görevleri gibi yapılandırılmış listelerdeki her bir madde ayrı bir bölüt olarak değerlendirilebilir.\n    *   **Temizleme:** Gereksiz Markdown sözdizimi karakterleri (embedding kalitesini düşürebilecek) minimuma indirilecek, ancak metnin okunabilirliği ve yapısı korunacaktır."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_9",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 9,
        "text": "2.  **Embedding Modeli Seçimi:**\n    *   Dokümanların dili (Türkçe ve potansiyel İngilizce) göz önüne alındığında, çok dilli bir model veya özellikle Türkçe için eğitilmiş bir model tercih edilecektir. `sentence-transformers` kütüphanesinden `paraphrase-multilingual-MiniLM-L12-v2` veya benzeri bir model başlangıç için uygun olabilir. Gerekirse, daha spesifik Türkçe modeller (örn: `dbmdz/bert-base-turkish-cased` tabanlı bir sentence transformer) araştırılacaktır.\n    *   Modelin kurulumu ve Python ortamına entegrasyonu sağlanacaktır (`pip3 install sentence-transformers`)."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_10",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 10,
        "text": "3.  **Embedding Üretimi (Embedding Generation):**\n    *   Python scripti kullanılarak hedeflenen dokümanlar okunacak, ön işleme adımlarından geçirilecek ve seçilen model ile her bir bölütün embedding vektörü üretilecektir.\n    *   Her embedding vektörü ile birlikte, kaynağı (dosya yolu, bölüm başlığı/numarası) ve orijinal metin gibi meta veriler saklanacaktır."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_11",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 11,
        "text": "4.  **Vektör Depolama ve İndeksleme (Vector Storage & Indexing):**\n    *   **İlk Aşama (PoC):** Basitlik ve hız için `FAISS (Facebook AI Similarity Search)` kütüphanesi kullanılacaktır. Üretilen embeddingler bir FAISS indeksine eklenecektir. Meta veriler ayrı bir yapıda (örn: Python dictionary veya JSON dosyası) indeksle eşleştirilerek saklanacaktır.\n    *   **Kurulum:** `pip3 install faiss-cpu` (veya GPU destekli versiyonu eğer ortam uygunsa).\n    *   Saklanacak dosyalar: `embeddings.index` (FAISS indeksi) ve `metadata.json` (vektörlere karşılık gelen doküman bilgileri)."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_12",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 12,
        "text": "## 4. Özelliklerin Geliştirilmesi"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_13",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 13,
        "text": "1.  **Anlamsal Arama Arayüzü (Python Fonksiyonu/Scripti):**\n    *   Girdi: Kullanıcı sorgusu (doğal dil metni).\n    *   İşlem:\n        1.  Sorgunun embedding vektörünü üret.\n        2.  FAISS indeksinde bu vektöre en yakın K adet embedding vektörünü bul (kosinüs benzerliği ile).\n        3.  Bulunan vektörlere karşılık gelen meta verilerden orijinal metin bölümlerini ve kaynaklarını al.\n    *   Çıktı: En alakalı doküman bölümlerinin listesi (kaynak bilgisi ile birlikte)."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_14",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 14,
        "text": "2.  **Hibrit Arama Mantığı:**\n    *   Anlamsal arama sonuçları ile birlikte, sorgudaki anahtar kelimeleri içeren doküman bölümlerini de getirecek basit bir anahtar kelime eşleştirme mekanizması eklenecektir.\n    *   İki sonuç kümesi birleştirilip (örneğin, önce anahtar kelime eşleşmeleri, sonra anlamsal benzerlikler veya birleşik bir skorlama ile) kullanıcıya sunulacaktır."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_15",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 15,
        "text": "3.  **Görevler için Bağlamsal Bilgi Sağlama:**\n    *   Girdi: Bir görev tanımı (örn: `standart_gorev_atama_sablonu.md` içeriğinden \"Görev Açıklaması ve Kapsamı\" bölümü veya `ana_gorev_panosu.md`'den görev adı).\n    *   İşlem: Görev tanımının embedding vektörü üretilir ve anlamsal arama mekanizması kullanılarak dokümantasyon içinde en alakalı bölümler bulunur.\n    *   Çıktı: AI personasına, göreviyle ilgili olabilecek doküman bölümlerinin bir listesi öneri olarak sunulur."
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_16",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 16,
        "text": "## 5. Geliştirme Ortamı ve Kütüphaneler"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_17",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 17,
        "text": "*   **Dil:** Python 3.11\n*   **Temel Kütüphaneler:**\n    *   `sentence-transformers` (Embedding üretimi için)\n    *   `faiss-cpu` (Vektör indeksleme ve arama için)\n    *   `numpy` (Vektör işlemleri için)\n    *   `markdown` veya `beautifulsoup4` (Markdown ayrıştırma için, isteğe bağlı)"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_18",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 18,
        "text": "## 6. Kaydedilecek Dosyalar (Örnek)"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_19",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 19,
        "text": "*   `/Yonetici_Ofisi/AI_Yardimcilari/Dokuman_Embeddings/`:\n    *   `embeddings.index` (FAISS indeksi)\n    *   `metadata.json` (Embedding meta verileri)\n    *   `generate_embeddings.py` (Embedding üretme scripti)\n    *   `semantic_search.py` (Arama ve bağlamsal yardım fonksiyonlarını içeren script)"
    },
    {
        "doc_id": "doc_15_embedding_workflow_design.md_20",
        "source_file": "/Planlama_Ofisi/embedding_workflow_design.md",
        "chunk_index": 20,
        "text": "Bu tasarım, embedding tabanlı dokümantasyon özelliklerinin ilk aşamasını hayata geçirmek için bir yol haritası sunmaktadır. Uygulama sırasında detaylar daha da netleşecektir."
    }
]