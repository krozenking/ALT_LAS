services:
  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ../api-gateway:/app
      - /app/node_modules
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  segmentation-service:
    build:
      context: ../segmentation-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ../segmentation-service:/app
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  runner-service:
    build:
      context: ../runner-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ../runner-service:/app
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  archive-service:
    build:
      context: ../archive-service
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ../archive-service:/app
    networks:
      - alt_las_network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=altlas
      - POSTGRES_PASSWORD=altlas_password
      - POSTGRES_DB=altlas_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U altlas"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:latest
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/varz"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - alt_las_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  chronograf:
    image: chronograf:latest
    ports:
      - "8888:8888"
    environment:
      - INFLUXDB_URL=http://influxdb:8086
    volumes:
      - chronograf_data:/var/lib/chronograf
    networks:
      - alt_las_network
    restart: unless-stopped
    depends_on:
      - influxdb

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=altlas_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin_password
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - alt_las_network
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - alt_las_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  alt_las_network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  chronograf_data:
  influxdb_data:

