# Beta Dockerfile for API Gateway Service
# Created by Can Tekin (DevOps Engineer)

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache --virtual .build-deps python3 make g++

# Copy package files
COPY api-gateway/package.json api-gateway/package-lock.json ./

# Modify package.json to use CommonJS
RUN sed -i 's/"type": "module"/"type": "commonjs"/g' package.json

# Install dependencies
RUN npm ci --only=production

# Copy application code
COPY api-gateway /app/

# Create a simple index.js file with CommonJS syntax
RUN echo 'const express = require("express");\n\
const app = express();\n\
const port = process.env.PORT || 3000;\n\
\n\
// Basic middleware\n\
app.use(express.json());\n\
\n\
// Health check endpoint\n\
app.get("/health", (req, res) => {\n\
  res.json({ status: "UP" });\n\
});\n\
\n\
// Root endpoint\n\
app.get("/", (req, res) => {\n\
  res.json({ \n\
    message: "Welcome to ALT_LAS API Gateway",\n\
    version: "beta.v15"\n\
  });\n\
});\n\
\n\
// Start server\n\
app.listen(port, () => {\n\
  console.log(`API Gateway running on port ${port}`);\n\
});\n\
\n\
module.exports = app;' > /app/src/index.js

# Remove build dependencies
RUN apk del .build-deps

# Runtime stage
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copy dependencies and application code from builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/src ./src
COPY --from=builder /app/swagger.yaml ./swagger.yaml
COPY --from=builder /app/package.json ./package.json

# Set proper permissions
RUN chown -R appuser:appgroup /app

# Create necessary directories for read-only filesystem
RUN mkdir -p /app/tmp && chown -R appuser:appgroup /app/tmp

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Add health check (standard production interval)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1

# Environment variables for production
ENV NODE_ENV=production
ENV PORT=3000

# Command to run the application
CMD ["node", "src/index.js"]
