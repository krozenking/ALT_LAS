# Development Dockerfile for Runner Service
# Created by Worker 8 (Security and DevOps Specialist)

FROM rust:1.65-slim

# Set working directory
WORKDIR /app

# Install development dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libssl-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Cargo files
COPY runner-service/Cargo.toml runner-service/Cargo.lock ./

# Create dummy source file to cache dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs

# Build dependencies
RUN cargo build

# Copy application code (will be mounted via volume in dev)
# COPY runner-service/src ./src

# Create non-root user but allow write access for development
RUN groupadd -r appgroup && \
    useradd -r -g appgroup -d /app -s /sbin/nologin -c "Docker image user" appuser && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8082

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:8082/health || exit 1

# Command to run the application with hot reloading (using cargo-watch or similar)
# Assuming cargo-watch is installed or added as a dependency
# CMD ["cargo", "watch", "-x", "run"]
# Fallback: build and run (less ideal for dev)
CMD cargo build && ./target/debug/runner-service

